-- AUTOGENERATED FILE --


module Ecs exposing
    ( AccelerationType
    , AiType
    , ControlsType
    , DisplayType
    , Ecs
    , EntityId
    , HumanType
    , PositionType
    , PredatorType
    , PreyType
    , VelocityType
    , acceleration
    , ai
    , andInsertComponent
    , andRemoveComponent
    , controls
    , createEntity
    , display
    , getComponent
    , human
    , init
    , insertComponent
    , position
    , predator
    , prey
    , processEntities
    , processEntities2
    , removeAllComponents
    , removeComponent
    , velocity
    )

import Dict
    exposing
        ( Dict
        )
import Ecs.Components
    exposing
        ( Acceleration
        , Ai
        , Controls
        , Display
        , Human
        , Position
        , Predator
        , Prey
        , Velocity
        )


type Ecs
    = Ecs Model


type alias Model =
    { velocityComponents : Dict Int Velocity
    , preyComponents : Dict Int Prey
    , predatorComponents : Dict Int Predator
    , positionComponents : Dict Int Position
    , humanComponents : Dict Int Human
    , displayComponents : Dict Int Display
    , controlsComponents : Dict Int Controls
    , aiComponents : Dict Int Ai
    , accelerationComponents : Dict Int Acceleration
    , numberOfEntities : Int
    }


init : Ecs
init =
    Ecs
        { velocityComponents = Dict.empty
        , preyComponents = Dict.empty
        , predatorComponents = Dict.empty
        , positionComponents = Dict.empty
        , humanComponents = Dict.empty
        , displayComponents = Dict.empty
        , controlsComponents = Dict.empty
        , aiComponents = Dict.empty
        , accelerationComponents = Dict.empty
        , numberOfEntities = 0
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs model) =
    ( Ecs { model | numberOfEntities = model.numberOfEntities + 1 }
    , EntityId model.numberOfEntities
    )



-- COMPONENTS --


insertComponent : ComponentType a -> a -> EntityId -> Ecs -> Ecs
insertComponent (ComponentType type_) component (EntityId entityId) (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.insert entityId component (type_.getComponents model))
            model
        )


andInsertComponent : ComponentType a -> a -> ( Ecs, EntityId ) -> ( Ecs, EntityId )
andInsertComponent type_ component ( ecs, entityId ) =
    ( insertComponent type_ component entityId ecs, entityId )


removeComponent : ComponentType a -> EntityId -> Ecs -> Ecs
removeComponent (ComponentType type_) (EntityId entityId) (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.remove entityId (type_.getComponents model))
            model
        )


andRemoveComponent : ComponentType a -> ( Ecs, EntityId ) -> ( Ecs, EntityId )
andRemoveComponent type_ ( ecs, entityId ) =
    ( removeComponent type_ entityId ecs, entityId )


removeAllComponents : EntityId -> Ecs -> Ecs
removeAllComponents (EntityId entityId) (Ecs model) =
    Ecs
        { model
            | velocityComponents = Dict.remove entityId model.velocityComponents
            , preyComponents = Dict.remove entityId model.preyComponents
            , predatorComponents = Dict.remove entityId model.predatorComponents
            , positionComponents = Dict.remove entityId model.positionComponents
            , humanComponents = Dict.remove entityId model.humanComponents
            , displayComponents = Dict.remove entityId model.displayComponents
            , controlsComponents = Dict.remove entityId model.controlsComponents
            , aiComponents = Dict.remove entityId model.aiComponents
            , accelerationComponents = Dict.remove entityId model.accelerationComponents
        }


getComponent : ComponentType a -> EntityId -> Ecs -> Maybe a
getComponent (ComponentType { getComponents }) (EntityId entityId) (Ecs model) =
    Dict.get entityId (getComponents model)



-- SYSTEMS --


processEntities :
    ComponentType a
    -> (EntityId -> a -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities (ComponentType type_) processor ( Ecs model, x ) =
    Dict.foldl
        (EntityId >> processor)
        ( Ecs model, x )
        (type_.getComponents model)


processEntities2 :
    ComponentType a
    -> ComponentType b
    -> (EntityId -> a -> b -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities2 (ComponentType typeA) (ComponentType typeB) processor ( Ecs model, x ) =
    let
        componentsA =
            typeA.getComponents model

        componentsB =
            typeB.getComponents model
    in
    Dict.foldl
        (\entityId componentA data ->
            case Dict.get entityId componentsB of
                Nothing ->
                    data

                Just componentB ->
                    processor (EntityId entityId) componentA componentB data
        )
        ( Ecs model, x )
        componentsA



-- COMPONENT Types --


type ComponentType a
    = ComponentType
        { getComponents : Model -> Dict Int a
        , setComponents : Dict Int a -> Model -> Model
        }


type alias VelocityType =
    ComponentType Velocity


velocity : VelocityType
velocity =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = setVelocityComponents
        }


setVelocityComponents : Dict Int Velocity -> Model -> Model
setVelocityComponents components model =
    { model | velocityComponents = components }


type alias PreyType =
    ComponentType Prey


prey : PreyType
prey =
    ComponentType
        { getComponents = .preyComponents
        , setComponents = setPreyComponents
        }


setPreyComponents : Dict Int Prey -> Model -> Model
setPreyComponents components model =
    { model | preyComponents = components }


type alias PredatorType =
    ComponentType Predator


predator : PredatorType
predator =
    ComponentType
        { getComponents = .predatorComponents
        , setComponents = setPredatorComponents
        }


setPredatorComponents : Dict Int Predator -> Model -> Model
setPredatorComponents components model =
    { model | predatorComponents = components }


type alias PositionType =
    ComponentType Position


position : PositionType
position =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = setPositionComponents
        }


setPositionComponents : Dict Int Position -> Model -> Model
setPositionComponents components model =
    { model | positionComponents = components }


type alias HumanType =
    ComponentType Human


human : HumanType
human =
    ComponentType
        { getComponents = .humanComponents
        , setComponents = setHumanComponents
        }


setHumanComponents : Dict Int Human -> Model -> Model
setHumanComponents components model =
    { model | humanComponents = components }


type alias DisplayType =
    ComponentType Display


display : DisplayType
display =
    ComponentType
        { getComponents = .displayComponents
        , setComponents = setDisplayComponents
        }


setDisplayComponents : Dict Int Display -> Model -> Model
setDisplayComponents components model =
    { model | displayComponents = components }


type alias ControlsType =
    ComponentType Controls


controls : ControlsType
controls =
    ComponentType
        { getComponents = .controlsComponents
        , setComponents = setControlsComponents
        }


setControlsComponents : Dict Int Controls -> Model -> Model
setControlsComponents components model =
    { model | controlsComponents = components }


type alias AiType =
    ComponentType Ai


ai : AiType
ai =
    ComponentType
        { getComponents = .aiComponents
        , setComponents = setAiComponents
        }


setAiComponents : Dict Int Ai -> Model -> Model
setAiComponents components model =
    { model | aiComponents = components }


type alias AccelerationType =
    ComponentType Acceleration


acceleration : AccelerationType
acceleration =
    ComponentType
        { getComponents = .accelerationComponents
        , setComponents = setAccelerationComponents
        }


setAccelerationComponents : Dict Int Acceleration -> Model -> Model
setAccelerationComponents components model =
    { model | accelerationComponents = components }
