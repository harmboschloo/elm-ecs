-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#%7B%22ecs%22%3A%5B%22Ecs%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22Ai%22%5D%2C%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22Destroy%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Scale%22%5D%2C%5B%22Components%22%2C%22ScaleAnimation%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%2C%22nodes%22%3A%5B%7B%22name%22%3A%22collectable%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22collector%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22destroy%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Destroy%22%5D%5D%7D%2C%7B%22name%22%3A%22keyControls%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%5D%7D%2C%7B%22name%22%3A%22motionControl%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22movement%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22render%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%5D%7D%2C%7B%22name%22%3A%22scaleAnimation%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22ScaleAnimation%22%5D%5D%7D%5D%7D


module Ecs exposing
    ( CollectableNode
    , CollectorNode
    , ComponentType
    , DestroyNode
    , Ecs
    , EntityId
    , KeyControlsNode
    , MotionControlNode
    , MovementNode
    , NodeType
    , RenderNode
    , ScaleAnimationNode
    , aiComponent
    , collectableComponent
    , collectableNode
    , collectorComponent
    , collectorNode
    , controlsComponent
    , createEntity
    , destroyComponent
    , destroyEntity
    , destroyNode
    , empty
    , getComponent
    , insertComponent
    , iterateEntities
    , keyControlsMapComponent
    , keyControlsNode
    , motionComponent
    , motionControlNode
    , movementNode
    , positionComponent
    , removeComponent
    , renderNode
    , resetEntity
    , scaleAnimationComponent
    , scaleAnimationNode
    , scaleComponent
    , spriteComponent
    , velocityComponent
    )

import Array
import Components
import Components.Controls
import Set



-- MODEL --


type Ecs
    = Ecs_ Model_


type alias Model_ =
    { aiComponents : Array.Array (Maybe Components.Ai)
    , collectableComponents : Array.Array (Maybe Components.Collectable)
    , collectorComponents : Array.Array (Maybe Components.Collector)
    , controlsComponents : Array.Array (Maybe Components.Controls.Controls)
    , destroyComponents : Array.Array (Maybe Components.Destroy)
    , keyControlsMapComponents : Array.Array (Maybe Components.KeyControlsMap)
    , motionComponents : Array.Array (Maybe Components.Motion)
    , positionComponents : Array.Array (Maybe Components.Position)
    , scaleComponents : Array.Array (Maybe Components.Scale)
    , scaleAnimationComponents : Array.Array (Maybe Components.ScaleAnimation)
    , spriteComponents : Array.Array (Maybe Components.Sprite)
    , velocityComponents : Array.Array (Maybe Components.Velocity)
    , collectableEntities : Set.Set Int
    , collectorEntities : Set.Set Int
    , destroyEntities : Set.Set Int
    , keyControlsEntities : Set.Set Int
    , motionControlEntities : Set.Set Int
    , movementEntities : Set.Set Int
    , renderEntities : Set.Set Int
    , scaleAnimationEntities : Set.Set Int
    , destroyedEntities_ : List Int
    }


empty : Ecs
empty =
    Ecs_
        { aiComponents = Array.empty
        , collectableComponents = Array.empty
        , collectorComponents = Array.empty
        , controlsComponents = Array.empty
        , destroyComponents = Array.empty
        , keyControlsMapComponents = Array.empty
        , motionComponents = Array.empty
        , positionComponents = Array.empty
        , scaleComponents = Array.empty
        , scaleAnimationComponents = Array.empty
        , spriteComponents = Array.empty
        , velocityComponents = Array.empty
        , collectableEntities = Set.empty
        , collectorEntities = Set.empty
        , destroyEntities = Set.empty
        , keyControlsEntities = Set.empty
        , motionControlEntities = Set.empty
        , movementEntities = Set.empty
        , renderEntities = Set.empty
        , scaleAnimationEntities = Set.empty
        , destroyedEntities_ = []
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs_ model_) =
    case model_.destroyedEntities_ of
        [] ->
            ( Ecs_
                { model_
                    | aiComponents = Array.push Nothing model_.aiComponents
                    , collectableComponents = Array.push Nothing model_.collectableComponents
                    , collectorComponents = Array.push Nothing model_.collectorComponents
                    , controlsComponents = Array.push Nothing model_.controlsComponents
                    , destroyComponents = Array.push Nothing model_.destroyComponents
                    , keyControlsMapComponents = Array.push Nothing model_.keyControlsMapComponents
                    , motionComponents = Array.push Nothing model_.motionComponents
                    , positionComponents = Array.push Nothing model_.positionComponents
                    , scaleComponents = Array.push Nothing model_.scaleComponents
                    , scaleAnimationComponents = Array.push Nothing model_.scaleAnimationComponents
                    , spriteComponents = Array.push Nothing model_.spriteComponents
                    , velocityComponents = Array.push Nothing model_.velocityComponents
                }
            , EntityId (Array.length model_.aiComponents)
            )

        head_ :: tail_ ->
            ( Ecs_ { model_ | destroyedEntities_ = tail_ }
            , EntityId head_
            )


destroyEntity : EntityId -> Ecs -> Ecs
destroyEntity (EntityId entityId_) (Ecs_ model_) =
    { model_ | destroyedEntities_ = entityId_ :: model_.destroyedEntities_ }
        |> removeEntityComponents_ entityId_
        |> Ecs_


resetEntity : EntityId -> Ecs -> Ecs
resetEntity (EntityId entityId_) (Ecs_ model_) =
    Ecs_ (removeEntityComponents_ entityId_ model_)


removeEntityComponents_ : Int -> Model_ -> Model_
removeEntityComponents_ entityId_ model_ =
    { model_
        | aiComponents = Array.set entityId_ Nothing model_.aiComponents
        , collectableComponents = Array.set entityId_ Nothing model_.collectableComponents
        , collectorComponents = Array.set entityId_ Nothing model_.collectorComponents
        , controlsComponents = Array.set entityId_ Nothing model_.controlsComponents
        , destroyComponents = Array.set entityId_ Nothing model_.destroyComponents
        , keyControlsMapComponents = Array.set entityId_ Nothing model_.keyControlsMapComponents
        , motionComponents = Array.set entityId_ Nothing model_.motionComponents
        , positionComponents = Array.set entityId_ Nothing model_.positionComponents
        , scaleComponents = Array.set entityId_ Nothing model_.scaleComponents
        , scaleAnimationComponents = Array.set entityId_ Nothing model_.scaleAnimationComponents
        , spriteComponents = Array.set entityId_ Nothing model_.spriteComponents
        , velocityComponents = Array.set entityId_ Nothing model_.velocityComponents
        , collectableEntities = Set.remove entityId_ model_.collectableEntities
        , collectorEntities = Set.remove entityId_ model_.collectorEntities
        , destroyEntities = Set.remove entityId_ model_.destroyEntities
        , keyControlsEntities = Set.remove entityId_ model_.keyControlsEntities
        , motionControlEntities = Set.remove entityId_ model_.motionControlEntities
        , movementEntities = Set.remove entityId_ model_.movementEntities
        , renderEntities = Set.remove entityId_ model_.renderEntities
        , scaleAnimationEntities = Set.remove entityId_ model_.scaleAnimationEntities
    }


iterateEntities :
    NodeType node
    -> (EntityId -> node -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateEntities (NodeType nodeType_) callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            case nodeType_.getNode entityId_ model_ of
                Nothing ->
                    result_

                Just node_ ->
                    callback_ (EntityId entityId_) node_ result_
        )
        ( Ecs_ model_, context_ )
        (nodeType_.getEntities model_)



-- COMPONENTS --


insertComponent : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insertComponent (EntityId entityId_) (ComponentType type_) component_ (Ecs_ model_) =
    let
        updatedModel_ =
            type_.setComponents
                (Array.set entityId_ (Just component_) (type_.getComponents model_))
                model_
    in
    Ecs_
        (List.foldl (insertEntityInSet_ entityId_) updatedModel_ type_.entitySets)


insertEntityInSet_ : Int -> EntitySetType_ -> Model_ -> Model_
insertEntityInSet_ entityId_ entitySetType_ model_ =
    if entitySetType_.member entityId_ model_ then
        entitySetType_.setEntities
            (Set.insert entityId_ (entitySetType_.getEntities model_))
            model_

    else
        model_


removeComponent : EntityId -> ComponentType a -> Ecs -> Ecs
removeComponent (EntityId entityId_) (ComponentType type_) (Ecs_ model_) =
    type_.entitySets
        |> List.foldl (removeEntityFromSet_ entityId_) model_
        |> type_.setComponents
            (Array.set entityId_ Nothing (type_.getComponents model_))
        |> Ecs_


removeEntityFromSet_ : Int -> EntitySetType_ -> Model_ -> Model_
removeEntityFromSet_ entityId_ entitySetType_ model_ =
    entitySetType_.setEntities
        (Set.remove entityId_ (entitySetType_.getEntities model_))
        model_


getComponent : EntityId -> ComponentType a -> Ecs -> Maybe a
getComponent (EntityId entityId_) (ComponentType type_) (Ecs_ model_) =
    Array.get entityId_ (type_.getComponents model_)
        |> Maybe.withDefault Nothing



-- COMPONENT TYPES --


type ComponentType a
    = ComponentType
        { getComponents : Model_ -> Array.Array (Maybe a)
        , setComponents : Array.Array (Maybe a) -> Model_ -> Model_
        , entitySets : List EntitySetType_
        }


aiComponent : ComponentType Components.Ai
aiComponent =
    ComponentType
        { getComponents = .aiComponents
        , setComponents = \components_ model_ -> { model_ | aiComponents = components_ }
        , entitySets = []
        }


collectableComponent : ComponentType Components.Collectable
collectableComponent =
    ComponentType
        { getComponents = .collectableComponents
        , setComponents = \components_ model_ -> { model_ | collectableComponents = components_ }
        , entitySets = [ collectableEntitySet_ ]
        }


collectorComponent : ComponentType Components.Collector
collectorComponent =
    ComponentType
        { getComponents = .collectorComponents
        , setComponents = \components_ model_ -> { model_ | collectorComponents = components_ }
        , entitySets = [ collectorEntitySet_ ]
        }


controlsComponent : ComponentType Components.Controls.Controls
controlsComponent =
    ComponentType
        { getComponents = .controlsComponents
        , setComponents = \components_ model_ -> { model_ | controlsComponents = components_ }
        , entitySets = [ keyControlsEntitySet_, motionControlEntitySet_ ]
        }


destroyComponent : ComponentType Components.Destroy
destroyComponent =
    ComponentType
        { getComponents = .destroyComponents
        , setComponents = \components_ model_ -> { model_ | destroyComponents = components_ }
        , entitySets = [ destroyEntitySet_ ]
        }


keyControlsMapComponent : ComponentType Components.KeyControlsMap
keyControlsMapComponent =
    ComponentType
        { getComponents = .keyControlsMapComponents
        , setComponents = \components_ model_ -> { model_ | keyControlsMapComponents = components_ }
        , entitySets = [ keyControlsEntitySet_ ]
        }


motionComponent : ComponentType Components.Motion
motionComponent =
    ComponentType
        { getComponents = .motionComponents
        , setComponents = \components_ model_ -> { model_ | motionComponents = components_ }
        , entitySets = [ motionControlEntitySet_ ]
        }


positionComponent : ComponentType Components.Position
positionComponent =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = \components_ model_ -> { model_ | positionComponents = components_ }
        , entitySets = [ collectableEntitySet_, collectorEntitySet_, motionControlEntitySet_, movementEntitySet_, renderEntitySet_ ]
        }


scaleComponent : ComponentType Components.Scale
scaleComponent =
    ComponentType
        { getComponents = .scaleComponents
        , setComponents = \components_ model_ -> { model_ | scaleComponents = components_ }
        , entitySets = []
        }


scaleAnimationComponent : ComponentType Components.ScaleAnimation
scaleAnimationComponent =
    ComponentType
        { getComponents = .scaleAnimationComponents
        , setComponents = \components_ model_ -> { model_ | scaleAnimationComponents = components_ }
        , entitySets = [ scaleAnimationEntitySet_ ]
        }


spriteComponent : ComponentType Components.Sprite
spriteComponent =
    ComponentType
        { getComponents = .spriteComponents
        , setComponents = \components_ model_ -> { model_ | spriteComponents = components_ }
        , entitySets = [ renderEntitySet_ ]
        }


velocityComponent : ComponentType Components.Velocity
velocityComponent =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = \components_ model_ -> { model_ | velocityComponents = components_ }
        , entitySets = [ motionControlEntitySet_, movementEntitySet_ ]
        }



-- NODES --


type alias CollectableNode =
    { collectable : Components.Collectable
    , position : Components.Position
    }


type alias CollectorNode =
    { collector : Components.Collector
    , position : Components.Position
    }


type alias DestroyNode =
    { destroy : Components.Destroy
    }


type alias KeyControlsNode =
    { controls : Components.Controls.Controls
    , keyControlsMap : Components.KeyControlsMap
    }


type alias MotionControlNode =
    { controls : Components.Controls.Controls
    , motion : Components.Motion
    , position : Components.Position
    , velocity : Components.Velocity
    }


type alias MovementNode =
    { position : Components.Position
    , velocity : Components.Velocity
    }


type alias RenderNode =
    { position : Components.Position
    , sprite : Components.Sprite
    }


type alias ScaleAnimationNode =
    { scaleAnimation : Components.ScaleAnimation
    }



-- NODE TYPES --


type NodeType node
    = NodeType
        { getEntities : Model_ -> Set.Set Int
        , getNode : Int -> Model_ -> Maybe node
        }


collectableNode : NodeType CollectableNode
collectableNode =
    NodeType
        { getEntities = .collectableEntities
        , getNode =
            \entityId_ model_ ->
                CollectableNode
                    |> nextComponent_ model_.collectableComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
        }


collectorNode : NodeType CollectorNode
collectorNode =
    NodeType
        { getEntities = .collectorEntities
        , getNode =
            \entityId_ model_ ->
                CollectorNode
                    |> nextComponent_ model_.collectorComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
        }


destroyNode : NodeType DestroyNode
destroyNode =
    NodeType
        { getEntities = .destroyEntities
        , getNode =
            \entityId_ model_ ->
                DestroyNode
                    |> nextComponent_ model_.destroyComponents entityId_
        }


keyControlsNode : NodeType KeyControlsNode
keyControlsNode =
    NodeType
        { getEntities = .keyControlsEntities
        , getNode =
            \entityId_ model_ ->
                KeyControlsNode
                    |> nextComponent_ model_.controlsComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.keyControlsMapComponents entityId_)
        }


motionControlNode : NodeType MotionControlNode
motionControlNode =
    NodeType
        { getEntities = .motionControlEntities
        , getNode =
            \entityId_ model_ ->
                MotionControlNode
                    |> nextComponent_ model_.controlsComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.motionComponents entityId_)
                    |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
                    |> Maybe.andThen (nextComponent_ model_.velocityComponents entityId_)
        }


movementNode : NodeType MovementNode
movementNode =
    NodeType
        { getEntities = .movementEntities
        , getNode =
            \entityId_ model_ ->
                MovementNode
                    |> nextComponent_ model_.positionComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.velocityComponents entityId_)
        }


renderNode : NodeType RenderNode
renderNode =
    NodeType
        { getEntities = .renderEntities
        , getNode =
            \entityId_ model_ ->
                RenderNode
                    |> nextComponent_ model_.positionComponents entityId_
                    |> Maybe.andThen (nextComponent_ model_.spriteComponents entityId_)
        }


scaleAnimationNode : NodeType ScaleAnimationNode
scaleAnimationNode =
    NodeType
        { getEntities = .scaleAnimationEntities
        , getNode =
            \entityId_ model_ ->
                ScaleAnimationNode
                    |> nextComponent_ model_.scaleAnimationComponents entityId_
        }


nextComponent_ : Array.Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent_ components_ entityId_ callback_ =
    Array.get entityId_ components_
        |> Maybe.withDefault Nothing
        |> Maybe.map callback_



-- ENTITY SET TYPES --


type alias EntitySetType_ =
    { getEntities : Model_ -> Set.Set Int
    , setEntities : Set.Set Int -> Model_ -> Model_
    , member : Int -> Model_ -> Bool
    }


collectableEntitySet_ : EntitySetType_
collectableEntitySet_ =
    { getEntities = .collectableEntities
    , setEntities = \entities_ model_ -> { model_ | collectableEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.collectableComponents
                && isComponentsMember_ entityId_ model_.positionComponents
    }


collectorEntitySet_ : EntitySetType_
collectorEntitySet_ =
    { getEntities = .collectorEntities
    , setEntities = \entities_ model_ -> { model_ | collectorEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.collectorComponents
                && isComponentsMember_ entityId_ model_.positionComponents
    }


destroyEntitySet_ : EntitySetType_
destroyEntitySet_ =
    { getEntities = .destroyEntities
    , setEntities = \entities_ model_ -> { model_ | destroyEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.destroyComponents
    }


keyControlsEntitySet_ : EntitySetType_
keyControlsEntitySet_ =
    { getEntities = .keyControlsEntities
    , setEntities = \entities_ model_ -> { model_ | keyControlsEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.controlsComponents
                && isComponentsMember_ entityId_ model_.keyControlsMapComponents
    }


motionControlEntitySet_ : EntitySetType_
motionControlEntitySet_ =
    { getEntities = .motionControlEntities
    , setEntities = \entities_ model_ -> { model_ | motionControlEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.controlsComponents
                && isComponentsMember_ entityId_ model_.motionComponents
                && isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.velocityComponents
    }


movementEntitySet_ : EntitySetType_
movementEntitySet_ =
    { getEntities = .movementEntities
    , setEntities = \entities_ model_ -> { model_ | movementEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.velocityComponents
    }


renderEntitySet_ : EntitySetType_
renderEntitySet_ =
    { getEntities = .renderEntities
    , setEntities = \entities_ model_ -> { model_ | renderEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.spriteComponents
    }


scaleAnimationEntitySet_ : EntitySetType_
scaleAnimationEntitySet_ =
    { getEntities = .scaleAnimationEntities
    , setEntities = \entities_ model_ -> { model_ | scaleAnimationEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.scaleAnimationComponents
    }


isComponentsMember_ entityId_ components_ =
    case Array.get entityId_ components_ of
        Just (Just _) ->
            True

        _ ->
            False
