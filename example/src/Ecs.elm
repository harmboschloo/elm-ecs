-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#%7B%22ecs%22%3A%5B%22Ecs%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22Ai%22%5D%2C%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22Destroy%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Scale%22%5D%2C%5B%22Components%22%2C%22ScaleAnimation%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%2C%22iterators%22%3A%5B%7B%22name%22%3A%22Animation%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Scale%22%5D%2C%5B%22Components%22%2C%22ScaleAnimation%22%5D%5D%7D%2C%7B%22name%22%3A%22Collectable%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22Collector%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22Destroy%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Destroy%22%5D%5D%7D%2C%7B%22name%22%3A%22KeyControls%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%5D%7D%2C%7B%22name%22%3A%22MotionControl%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22Movement%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22Render%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%5D%7D%5D%7D


module Ecs exposing
    ( ComponentTypeName
    , Ecs
    , EntityId
    , ai
    , collectable
    , collector
    , controls
    , createEntity
    , destroy
    , destroyEntity
    , empty
    , getComponent
    , insertComponent
    , iterateAnimationEntities
    , iterateCollectableEntities
    , iterateCollectorEntities
    , iterateDestroyEntities
    , iterateKeyControlsEntities
    , iterateMotionControlEntities
    , iterateMovementEntities
    , iterateRenderEntities
    , keyControlsMap
    , motion
    , position
    , removeComponent
    , resetEntity
    , scale
    , scaleAnimation
    , sprite
    , velocity
    )

import Array
import Components
import Components.Controls
import Set



-- MODEL --


type Ecs
    = Ecs_ Model_


type alias Model_ =
    { aiComponents : Array.Array (Maybe Components.Ai)
    , collectableComponents : Array.Array (Maybe Components.Collectable)
    , collectorComponents : Array.Array (Maybe Components.Collector)
    , controlsComponents : Array.Array (Maybe Components.Controls.Controls)
    , destroyComponents : Array.Array (Maybe Components.Destroy)
    , keyControlsMapComponents : Array.Array (Maybe Components.KeyControlsMap)
    , motionComponents : Array.Array (Maybe Components.Motion)
    , positionComponents : Array.Array (Maybe Components.Position)
    , scaleComponents : Array.Array (Maybe Components.Scale)
    , scaleAnimationComponents : Array.Array (Maybe Components.ScaleAnimation)
    , spriteComponents : Array.Array (Maybe Components.Sprite)
    , velocityComponents : Array.Array (Maybe Components.Velocity)
    , animationEntities : Set.Set Int
    , collectableEntities : Set.Set Int
    , collectorEntities : Set.Set Int
    , destroyEntities : Set.Set Int
    , keyControlsEntities : Set.Set Int
    , motionControlEntities : Set.Set Int
    , movementEntities : Set.Set Int
    , renderEntities : Set.Set Int
    , destroyedEntities_ : List Int
    }


empty : Ecs
empty =
    Ecs_
        { aiComponents = Array.empty
        , collectableComponents = Array.empty
        , collectorComponents = Array.empty
        , controlsComponents = Array.empty
        , destroyComponents = Array.empty
        , keyControlsMapComponents = Array.empty
        , motionComponents = Array.empty
        , positionComponents = Array.empty
        , scaleComponents = Array.empty
        , scaleAnimationComponents = Array.empty
        , spriteComponents = Array.empty
        , velocityComponents = Array.empty
        , animationEntities = Set.empty
        , collectableEntities = Set.empty
        , collectorEntities = Set.empty
        , destroyEntities = Set.empty
        , keyControlsEntities = Set.empty
        , motionControlEntities = Set.empty
        , movementEntities = Set.empty
        , renderEntities = Set.empty
        , destroyedEntities_ = []
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs_ model_) =
    case model_.destroyedEntities_ of
        [] ->
            ( Ecs_
                { model_
                    | aiComponents = Array.push Nothing model_.aiComponents
                    , collectableComponents = Array.push Nothing model_.collectableComponents
                    , collectorComponents = Array.push Nothing model_.collectorComponents
                    , controlsComponents = Array.push Nothing model_.controlsComponents
                    , destroyComponents = Array.push Nothing model_.destroyComponents
                    , keyControlsMapComponents = Array.push Nothing model_.keyControlsMapComponents
                    , motionComponents = Array.push Nothing model_.motionComponents
                    , positionComponents = Array.push Nothing model_.positionComponents
                    , scaleComponents = Array.push Nothing model_.scaleComponents
                    , scaleAnimationComponents = Array.push Nothing model_.scaleAnimationComponents
                    , spriteComponents = Array.push Nothing model_.spriteComponents
                    , velocityComponents = Array.push Nothing model_.velocityComponents
                }
            , EntityId (Array.length model_.aiComponents)
            )

        head_ :: tail_ ->
            ( Ecs_ { model_ | destroyedEntities_ = tail_ }
            , EntityId head_
            )


destroyEntity : EntityId -> Ecs -> Ecs
destroyEntity (EntityId entityId_) (Ecs_ model_) =
    { model_ | destroyedEntities_ = entityId_ :: model_.destroyedEntities_ }
        |> removeEntityComponents_ entityId_
        |> Ecs_


resetEntity : EntityId -> Ecs -> Ecs
resetEntity (EntityId entityId_) (Ecs_ model_) =
    Ecs_ (removeEntityComponents_ entityId_ model_)


removeEntityComponents_ : Int -> Model_ -> Model_
removeEntityComponents_ entityId_ model_ =
    { model_
        | aiComponents = Array.set entityId_ Nothing model_.aiComponents
        , collectableComponents = Array.set entityId_ Nothing model_.collectableComponents
        , collectorComponents = Array.set entityId_ Nothing model_.collectorComponents
        , controlsComponents = Array.set entityId_ Nothing model_.controlsComponents
        , destroyComponents = Array.set entityId_ Nothing model_.destroyComponents
        , keyControlsMapComponents = Array.set entityId_ Nothing model_.keyControlsMapComponents
        , motionComponents = Array.set entityId_ Nothing model_.motionComponents
        , positionComponents = Array.set entityId_ Nothing model_.positionComponents
        , scaleComponents = Array.set entityId_ Nothing model_.scaleComponents
        , scaleAnimationComponents = Array.set entityId_ Nothing model_.scaleAnimationComponents
        , spriteComponents = Array.set entityId_ Nothing model_.spriteComponents
        , velocityComponents = Array.set entityId_ Nothing model_.velocityComponents
        , animationEntities = Set.remove entityId_ model_.animationEntities
        , collectableEntities = Set.remove entityId_ model_.collectableEntities
        , collectorEntities = Set.remove entityId_ model_.collectorEntities
        , destroyEntities = Set.remove entityId_ model_.destroyEntities
        , keyControlsEntities = Set.remove entityId_ model_.keyControlsEntities
        , motionControlEntities = Set.remove entityId_ model_.motionControlEntities
        , movementEntities = Set.remove entityId_ model_.movementEntities
        , renderEntities = Set.remove entityId_ model_.renderEntities
    }



-- COMPONENTS --


insertComponent : EntityId -> ComponentTypeName a -> a -> Ecs -> Ecs
insertComponent (EntityId entityId_) (ComponentTypeName type_) component_ (Ecs_ model_) =
    let
        updatedModel_ =
            type_.setComponents
                (Array.set entityId_ (Just component_) (type_.getComponents model_))
                model_
    in
    Ecs_
        (List.foldl (insertEntityInSet_ entityId_) updatedModel_ type_.entitySets)


insertEntityInSet_ : Int -> EntitySetType_ -> Model_ -> Model_
insertEntityInSet_ entityId_ entitySetType_ model_ =
    if entitySetType_.member entityId_ model_ then
        entitySetType_.setEntities
            (Set.insert entityId_ (entitySetType_.getEntities model_))
            model_

    else
        model_


removeComponent : EntityId -> ComponentTypeName a -> Ecs -> Ecs
removeComponent (EntityId entityId_) (ComponentTypeName type_) (Ecs_ model_) =
    type_.entitySets
        |> List.foldl (removeEntityFromSet_ entityId_) model_
        |> type_.setComponents
            (Array.set entityId_ Nothing (type_.getComponents model_))
        |> Ecs_


removeEntityFromSet_ : Int -> EntitySetType_ -> Model_ -> Model_
removeEntityFromSet_ entityId_ entitySetType_ model_ =
    entitySetType_.setEntities
        (Set.remove entityId_ (entitySetType_.getEntities model_))
        model_


getComponent : EntityId -> ComponentTypeName a -> Ecs -> Maybe a
getComponent (EntityId entityId_) (ComponentTypeName type_) (Ecs_ model_) =
    Array.get entityId_ (type_.getComponents model_)
        |> Maybe.withDefault Nothing



-- ENTITY ITERATORS --


iterateAnimationEntities :
    (EntityId -> Components.Scale -> Components.ScaleAnimation -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateAnimationEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.scaleComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.scaleAnimationComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.animationEntities


iterateCollectableEntities :
    (EntityId -> Components.Collectable -> Components.Position -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateCollectableEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.collectableComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.collectableEntities


iterateCollectorEntities :
    (EntityId -> Components.Collector -> Components.Position -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateCollectorEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.collectorComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.collectorEntities


iterateDestroyEntities :
    (EntityId -> Components.Destroy -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateDestroyEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.destroyComponents entityId_
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.destroyEntities


iterateKeyControlsEntities :
    (EntityId -> Components.Controls.Controls -> Components.KeyControlsMap -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateKeyControlsEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.controlsComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.keyControlsMapComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.keyControlsEntities


iterateMotionControlEntities :
    (EntityId -> Components.Controls.Controls -> Components.Motion -> Components.Position -> Components.Velocity -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateMotionControlEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.controlsComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.motionComponents entityId_)
                |> Maybe.andThen (nextComponent_ model_.positionComponents entityId_)
                |> Maybe.andThen (nextComponent_ model_.velocityComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.motionControlEntities


iterateMovementEntities :
    (EntityId -> Components.Position -> Components.Velocity -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateMovementEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.positionComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.velocityComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.movementEntities


iterateRenderEntities :
    (EntityId -> Components.Position -> Components.Sprite -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterateRenderEntities callback_ ( Ecs_ model_, context_ ) =
    Set.foldl
        (\entityId_ result_ ->
            callback_ (EntityId entityId_)
                |> nextComponent_ model_.positionComponents entityId_
                |> Maybe.andThen (nextComponent_ model_.spriteComponents entityId_)
                |> Maybe.map ((|>) result_)
                |> Maybe.withDefault result_
        )
        ( Ecs_ model_, context_ )
        model_.renderEntities


nextComponent_ : Array.Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent_ components_ entityId_ callback_ =
    Array.get entityId_ components_
        |> Maybe.withDefault Nothing
        |> Maybe.map callback_



-- ENTITY SET TYPES --


type alias EntitySetType_ =
    { getEntities : Model_ -> Set.Set Int
    , setEntities : Set.Set Int -> Model_ -> Model_
    , member : Int -> Model_ -> Bool
    }


animationEntitySet_ : EntitySetType_
animationEntitySet_ =
    { getEntities = .animationEntities
    , setEntities = \entities_ model_ -> { model_ | animationEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.scaleComponents
                && isComponentsMember_ entityId_ model_.scaleAnimationComponents
    }


collectableEntitySet_ : EntitySetType_
collectableEntitySet_ =
    { getEntities = .collectableEntities
    , setEntities = \entities_ model_ -> { model_ | collectableEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.collectableComponents
                && isComponentsMember_ entityId_ model_.positionComponents
    }


collectorEntitySet_ : EntitySetType_
collectorEntitySet_ =
    { getEntities = .collectorEntities
    , setEntities = \entities_ model_ -> { model_ | collectorEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.collectorComponents
                && isComponentsMember_ entityId_ model_.positionComponents
    }


destroyEntitySet_ : EntitySetType_
destroyEntitySet_ =
    { getEntities = .destroyEntities
    , setEntities = \entities_ model_ -> { model_ | destroyEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.destroyComponents
    }


keyControlsEntitySet_ : EntitySetType_
keyControlsEntitySet_ =
    { getEntities = .keyControlsEntities
    , setEntities = \entities_ model_ -> { model_ | keyControlsEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.controlsComponents
                && isComponentsMember_ entityId_ model_.keyControlsMapComponents
    }


motionControlEntitySet_ : EntitySetType_
motionControlEntitySet_ =
    { getEntities = .motionControlEntities
    , setEntities = \entities_ model_ -> { model_ | motionControlEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.controlsComponents
                && isComponentsMember_ entityId_ model_.motionComponents
                && isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.velocityComponents
    }


movementEntitySet_ : EntitySetType_
movementEntitySet_ =
    { getEntities = .movementEntities
    , setEntities = \entities_ model_ -> { model_ | movementEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.velocityComponents
    }


renderEntitySet_ : EntitySetType_
renderEntitySet_ =
    { getEntities = .renderEntities
    , setEntities = \entities_ model_ -> { model_ | renderEntities = entities_ }
    , member =
        \entityId_ model_ ->
            isComponentsMember_ entityId_ model_.positionComponents
                && isComponentsMember_ entityId_ model_.spriteComponents
    }


isComponentsMember_ entityId_ components_ =
    case Array.get entityId_ components_ of
        Just (Just _) ->
            True

        _ ->
            False



-- COMPONENT TYPES --


type ComponentTypeName a
    = ComponentTypeName
        { getComponents : Model_ -> Array.Array (Maybe a)
        , setComponents : Array.Array (Maybe a) -> Model_ -> Model_
        , entitySets : List EntitySetType_
        }


ai : ComponentTypeName Components.Ai
ai =
    ComponentTypeName
        { getComponents = .aiComponents
        , setComponents = \components_ model_ -> { model_ | aiComponents = components_ }
        , entitySets = []
        }


collectable : ComponentTypeName Components.Collectable
collectable =
    ComponentTypeName
        { getComponents = .collectableComponents
        , setComponents = \components_ model_ -> { model_ | collectableComponents = components_ }
        , entitySets = [ collectableEntitySet_ ]
        }


collector : ComponentTypeName Components.Collector
collector =
    ComponentTypeName
        { getComponents = .collectorComponents
        , setComponents = \components_ model_ -> { model_ | collectorComponents = components_ }
        , entitySets = [ collectorEntitySet_ ]
        }


controls : ComponentTypeName Components.Controls.Controls
controls =
    ComponentTypeName
        { getComponents = .controlsComponents
        , setComponents = \components_ model_ -> { model_ | controlsComponents = components_ }
        , entitySets = [ keyControlsEntitySet_, motionControlEntitySet_ ]
        }


destroy : ComponentTypeName Components.Destroy
destroy =
    ComponentTypeName
        { getComponents = .destroyComponents
        , setComponents = \components_ model_ -> { model_ | destroyComponents = components_ }
        , entitySets = [ destroyEntitySet_ ]
        }


keyControlsMap : ComponentTypeName Components.KeyControlsMap
keyControlsMap =
    ComponentTypeName
        { getComponents = .keyControlsMapComponents
        , setComponents = \components_ model_ -> { model_ | keyControlsMapComponents = components_ }
        , entitySets = [ keyControlsEntitySet_ ]
        }


motion : ComponentTypeName Components.Motion
motion =
    ComponentTypeName
        { getComponents = .motionComponents
        , setComponents = \components_ model_ -> { model_ | motionComponents = components_ }
        , entitySets = [ motionControlEntitySet_ ]
        }


position : ComponentTypeName Components.Position
position =
    ComponentTypeName
        { getComponents = .positionComponents
        , setComponents = \components_ model_ -> { model_ | positionComponents = components_ }
        , entitySets = [ collectableEntitySet_, collectorEntitySet_, motionControlEntitySet_, movementEntitySet_, renderEntitySet_ ]
        }


scale : ComponentTypeName Components.Scale
scale =
    ComponentTypeName
        { getComponents = .scaleComponents
        , setComponents = \components_ model_ -> { model_ | scaleComponents = components_ }
        , entitySets = [ animationEntitySet_ ]
        }


scaleAnimation : ComponentTypeName Components.ScaleAnimation
scaleAnimation =
    ComponentTypeName
        { getComponents = .scaleAnimationComponents
        , setComponents = \components_ model_ -> { model_ | scaleAnimationComponents = components_ }
        , entitySets = [ animationEntitySet_ ]
        }


sprite : ComponentTypeName Components.Sprite
sprite =
    ComponentTypeName
        { getComponents = .spriteComponents
        , setComponents = \components_ model_ -> { model_ | spriteComponents = components_ }
        , entitySets = [ renderEntitySet_ ]
        }


velocity : ComponentTypeName Components.Velocity
velocity =
    ComponentTypeName
        { getComponents = .velocityComponents
        , setComponents = \components_ model_ -> { model_ | velocityComponents = components_ }
        , entitySets = [ motionControlEntitySet_, movementEntitySet_ ]
        }
