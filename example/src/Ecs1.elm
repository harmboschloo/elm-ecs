-- AUTOGENERATED FILE --


module Ecs1 exposing
    ( DisplayType
    , Ecs
    , EntityId
    , PositionType
    , VelocityType
    , createEntity
    , destroyEntity
    , display
    , getComponent
    , init
    , insertComponent
    , position
    , processEntities
    , processEntities2
    , removeComponent
    , velocity
    )

import Dict exposing (Dict)
import Ecs.Components exposing (Display, Position, Velocity)


type Ecs
    = Ecs Model


type alias Model =
    { displayComponents : Dict Int Display
    , velocityComponents : Dict Int Velocity
    , positionComponents : Dict Int Position
    , numberOfEntities : Int
    }


init : Ecs
init =
    Ecs
        { displayComponents = Dict.empty
        , velocityComponents = Dict.empty
        , positionComponents = Dict.empty
        , numberOfEntities = 0
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs model) =
    ( Ecs { model | numberOfEntities = model.numberOfEntities + 1 }
    , EntityId model.numberOfEntities
    )


destroyEntity : EntityId -> Ecs -> Ecs
destroyEntity (EntityId entityId) (Ecs model) =
    Ecs
        { model
            | displayComponents = Dict.remove entityId model.displayComponents
            , velocityComponents = Dict.remove entityId model.velocityComponents
            , positionComponents = Dict.remove entityId model.positionComponents
        }



-- COMPONENTS --


insertComponent : ComponentType a -> EntityId -> a -> Ecs -> Ecs
insertComponent (ComponentType type_) (EntityId entityId) component (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.insert entityId component (type_.getComponents model))
            model
        )


removeComponent : ComponentType a -> EntityId -> Ecs -> Ecs
removeComponent (ComponentType type_) (EntityId entityId) (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.remove entityId (type_.getComponents model))
            model
        )


getComponent : ComponentType a -> EntityId -> Ecs -> Maybe a
getComponent (ComponentType { getComponents }) (EntityId entityId) (Ecs model) =
    Dict.get entityId (getComponents model)



-- SYSTEMS --


processEntities :
    ComponentType a
    -> (EntityId -> a -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities (ComponentType type_) processor ( Ecs model, x ) =
    Dict.foldl
        (EntityId >> processor)
        ( Ecs model, x )
        (type_.getComponents model)


processEntities2 :
    ComponentType a
    -> ComponentType b
    -> (EntityId -> a -> b -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities2 (ComponentType typeA) (ComponentType typeB) processor ( Ecs model, x ) =
    let
        componentsA =
            typeA.getComponents model

        componentsB =
            typeB.getComponents model
    in
    Dict.foldl
        (\entityId componentA data ->
            case Dict.get entityId componentsB of
                Nothing ->
                    data

                Just componentB ->
                    processor (EntityId entityId) componentA componentB data
        )
        ( Ecs model, x )
        componentsA



-- COMPONENT Types --


type ComponentType a
    = ComponentType
        { getComponents : Model -> Dict Int a
        , setComponents : Dict Int a -> Model -> Model
        }


type alias DisplayType =
    ComponentType Display


display : DisplayType
display =
    ComponentType
        { getComponents = .displayComponents
        , setComponents = setDisplayComponents
        }


setDisplayComponents : Dict Int Display -> Model -> Model
setDisplayComponents components model =
    { model | displayComponents = components }


type alias VelocityType =
    ComponentType Velocity


velocity : VelocityType
velocity =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = setVelocityComponents
        }


setVelocityComponents : Dict Int Velocity -> Model -> Model
setVelocityComponents components model =
    { model | velocityComponents = components }


type alias PositionType =
    ComponentType Position


position : PositionType
position =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = setPositionComponents
        }


setPositionComponents : Dict Int Position -> Model -> Model
setPositionComponents components model =
    { model | positionComponents = components }
