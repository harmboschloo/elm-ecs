module EcsModule1 exposing (Builder, Config, addComponent, build, builder, init)

import Dict



-- CONFIGURE ECS --


type Config
    = Config Model


type alias Model =
    { moduleName : String
    , components : List Component
    }


type alias Component =
    { typeName : String, moduleName : String }


init : String -> Config
init moduleName =
    Config
        { moduleName = moduleName
        , components = []
        }


addComponent : String -> String -> Config -> Config
addComponent typeName moduleName (Config config) =
    Config
        { config
            | components =
                { typeName = typeName
                , moduleName = moduleName
                }
                    :: config.components
        }



-- BUILD ECS --


build : Config -> String
build (Config model) =
    """-- AUTOGENERATED FILE --


module """ ++ model.moduleName ++ """ exposing
""" ++ buildExports model ++ """

""" ++ buildImports model ++ """

""" ++ buildApi model ++ """

""" ++ buildComponents model ++ """
"""


buildExports : Model -> String
buildExports model =
    let
        exports =
            List.foldl
                (\component list ->
                    (component.typeName ++ "Type")
                        :: firstToLower component.typeName
                        :: list
                )
                [ "Ecs"
                , "init"
                , "EntityId"
                , "createEntity"
                , "insertComponent"
                , "andInsertComponent"
                , "removeComponent"
                , "andRemoveComponent"
                , "removeAllComponents"
                , "getComponent"
                , "processEntities"
                , "processEntities2"
                ]
                model.components
    in
    "    ( " ++ (exports |> List.sort |> String.join "\n    , ") ++ "\n    )"


buildImports : Model -> String
buildImports model =
    model.components
        |> List.foldl
            (\component dict ->
                Dict.insert
                    component.moduleName
                    (component.typeName
                        :: (Dict.get component.moduleName dict
                                |> Maybe.withDefault []
                           )
                    )
                    dict
            )
            (Dict.fromList [ ( "Dict", [ "Dict" ] ) ])
        |> Dict.toList
        |> List.sort
        |> List.map
            (\( moduleName, values ) ->
                "import "
                    ++ moduleName
                    ++ "\n    exposing\n        ( "
                    ++ (List.sort values |> String.join "\n        , ")
                    ++ "\n        )"
            )
        |> String.join "\n"


buildApi : Model -> String
buildApi model =
    """
type Ecs
    = Ecs Model


type alias Model =
    { """
        ++ (List.map
                (\component ->
                    firstToLower component.typeName
                        ++ "Components : Dict Int "
                        ++ component.typeName
                )
                model.components
                |> String.join "\n    , "
           )
        ++ """
    , numberOfEntities : Int
    }


init : Ecs
init =
    Ecs
        { """
        ++ (List.map
                (\component ->
                    firstToLower component.typeName ++ "Components = Dict.empty"
                )
                model.components
                |> String.join "\n        , "
           )
        ++ """
        , numberOfEntities = 0
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs model) =
    ( Ecs { model | numberOfEntities = model.numberOfEntities + 1 }
    , EntityId model.numberOfEntities
    )



-- COMPONENTS --


insertComponent : ComponentType a -> a -> EntityId -> Ecs -> Ecs
insertComponent (ComponentType type_) component (EntityId entityId) (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.insert entityId component (type_.getComponents model))
            model
        )


andInsertComponent : ComponentType a -> a -> ( Ecs, EntityId ) -> ( Ecs, EntityId )
andInsertComponent type_ component ( ecs, entityId ) =
    ( insertComponent type_ component entityId ecs, entityId )


removeComponent : ComponentType a -> EntityId -> Ecs -> Ecs
removeComponent (ComponentType type_) (EntityId entityId) (Ecs model) =
    Ecs
        (type_.setComponents
            (Dict.remove entityId (type_.getComponents model))
            model
        )


andRemoveComponent : ComponentType a -> ( Ecs, EntityId ) -> ( Ecs, EntityId )
andRemoveComponent type_ ( ecs, entityId ) =
    ( removeComponent type_ entityId ecs, entityId )


removeAllComponents : EntityId -> Ecs -> Ecs
removeAllComponents (EntityId entityId) (Ecs model) =
    Ecs
        { model
            | """
        ++ (model.components
                |> List.map
                    (\{ typeName } ->
                        firstToLower typeName
                            ++ "Components = Dict.remove entityId model."
                            ++ firstToLower typeName
                            ++ "Components"
                    )
                |> String.join "\n            , "
           )
        ++ """
        }


getComponent : ComponentType a -> EntityId -> Ecs -> Maybe a
getComponent (ComponentType { getComponents }) (EntityId entityId) (Ecs model) =
    Dict.get entityId (getComponents model)



-- SYSTEMS --


processEntities :
    ComponentType a
    -> (EntityId -> a -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities (ComponentType type_) processor ( Ecs model, x ) =
    Dict.foldl
        (EntityId >> processor)
        ( Ecs model, x )
        (type_.getComponents model)


processEntities2 :
    ComponentType a
    -> ComponentType b
    -> (EntityId -> a -> b -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
processEntities2 (ComponentType typeA) (ComponentType typeB) processor ( Ecs model, x ) =
    let
        componentsA =
            typeA.getComponents model

        componentsB =
            typeB.getComponents model
    in
    Dict.foldl
        (\\entityId componentA data ->
            case Dict.get entityId componentsB of
                Nothing ->
                    data

                Just componentB ->
                    processor (EntityId entityId) componentA componentB data
        )
        ( Ecs model, x )
        componentsA
"""


buildComponents : Model -> String
buildComponents model =
    """
-- COMPONENT Types --


type ComponentType a
    = ComponentType
        { getComponents : Model -> Dict Int a
        , setComponents : Dict Int a -> Model -> Model
        }

""" ++ (List.map buildComponent model.components |> String.join "\n")


buildComponent : Component -> String
buildComponent { typeName } =
    """
type alias """ ++ typeName ++ """Type =
    ComponentType """ ++ typeName ++ """


""" ++ firstToLower typeName ++ """ : """ ++ typeName ++ """Type
""" ++ firstToLower typeName ++ """ =
    ComponentType
        { getComponents = .""" ++ firstToLower typeName ++ """Components
        , setComponents = set""" ++ typeName ++ """Components
        }


set""" ++ typeName ++ """Components : Dict Int """ ++ typeName ++ """ -> Model -> Model
set""" ++ typeName ++ """Components components model =
    { model | """ ++ firstToLower typeName ++ """Components = components }
"""



-- HELPERS --


firstToLower : String -> String
firstToLower string =
    (String.left 1 string |> String.toLower) ++ String.dropLeft 1 string



-- BUILDER PROGRAM --


type alias Builder msg =
    Program () () msg


builder : (String -> Cmd msg) -> Config -> Builder msg
builder onResult config =
    Platform.worker
        { init = \_ -> ( (), onResult (build config) )
        , update = \_ _ -> ( (), Cmd.none )
        , subscriptions = \_ -> Sub.none
        }
