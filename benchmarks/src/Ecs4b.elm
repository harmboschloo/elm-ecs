-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#%7B%22ecs%22%3A%5B%22Ecs5%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22A%22%5D%2C%5B%22Components%22%2C%22B%22%5D%2C%5B%22Components%22%2C%22C%22%5D%5D%2C%22nodes%22%3A%5B%7B%22name%22%3A%22a%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22A%22%5D%5D%7D%2C%7B%22name%22%3A%22ab%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22A%22%5D%2C%5B%22Components%22%2C%22B%22%5D%5D%7D%2C%7B%22name%22%3A%22abc%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22A%22%5D%2C%5B%22Components%22%2C%22B%22%5D%2C%5B%22Components%22%2C%22C%22%5D%5D%7D%5D%7D


module Ecs4b exposing
    ( Ecs, empty
    , EntityId, create, destroy, reset, size, activeSize, idToInt, intToId
    , ComponentType, get, insert, update, remove
    , NodeType, iterate, nodeSize
    , aComponent, bComponent, cComponent
    , ANode, AbNode, AbcNode
    , aNode, abNode, abcNode
    )

{-| Your Entitiy-Component-System.


# Model

@docs Ecs, empty


# Entities

@docs EntityId, create, destroy, reset, size, activeSize, idToInt, intToId


# Components

@docs ComponentType, get, insert, update, remove


# Nodes

@docs NodeType, iterate, nodeSize


# Your Component Types

@docs aComponent, bComponent, cComponent


# Your Nodes

@docs ANode, AbNode, AbcNode


# Your Node Types

@docs aNode, abNode, abcNode

-}

import Array
import Components
import Set



-- MODEL --


{-| -}
type Ecs
    = Ecs Model


type alias Model =
    { aComponents : Array.Array (Maybe Components.A)
    , bComponents : Array.Array (Maybe Components.B)
    , cComponents : Array.Array (Maybe Components.C)
    , aEntities : Set.Set Int
    , abEntities : Set.Set Int
    , abcEntities : Set.Set Int
    , destroyedEntitiesCache : List Int
    }


{-| -}
empty : Ecs
empty =
    Ecs
        { aComponents = Array.empty
        , bComponents = Array.empty
        , cComponents = Array.empty
        , aEntities = Set.empty
        , abEntities = Set.empty
        , abcEntities = Set.empty
        , destroyedEntitiesCache = []
        }



-- ENTITIES --


{-| -}
type EntityId
    = EntityId Int


{-| -}
create : Ecs -> ( Ecs, EntityId )
create (Ecs model) =
    case model.destroyedEntitiesCache of
        [] ->
            ( Ecs
                { model
                    | aComponents = Array.push Nothing model.aComponents
                    , bComponents = Array.push Nothing model.bComponents
                    , cComponents = Array.push Nothing model.cComponents
                }
            , EntityId (entitiesSize model)
            )

        head :: tail ->
            ( Ecs { model | destroyedEntitiesCache = tail }
            , EntityId head
            )


{-| -}
destroy : EntityId -> Ecs -> Ecs
destroy (EntityId entityId) (Ecs model) =
    { model | destroyedEntitiesCache = entityId :: model.destroyedEntitiesCache }
        |> resetEntity entityId
        |> Ecs


{-| -}
reset : EntityId -> Ecs -> Ecs
reset (EntityId entityId) (Ecs model) =
    Ecs (resetEntity entityId model)


resetEntity : Int -> Model -> Model
resetEntity entityId model =
    { model
        | aComponents = Array.set entityId Nothing model.aComponents
        , bComponents = Array.set entityId Nothing model.bComponents
        , cComponents = Array.set entityId Nothing model.cComponents
        , aEntities = Set.remove entityId model.aEntities
        , abEntities = Set.remove entityId model.abEntities
        , abcEntities = Set.remove entityId model.abcEntities
    }


{-| -}
size : Ecs -> Int
size (Ecs model) =
    entitiesSize model


{-| -}
activeSize : Ecs -> Int
activeSize (Ecs model) =
    entitiesSize model - List.length model.destroyedEntitiesCache


entitiesSize : Model -> Int
entitiesSize model =
    Array.length model.aComponents


{-| -}
idToInt : EntityId -> Int
idToInt (EntityId id) =
    id


{-| -}
intToId : Int -> Ecs -> Maybe EntityId
intToId id ecs =
    if id < size ecs then
        Just (EntityId id)

    else
        Nothing



-- COMPONENTS --


{-| -}
type ComponentType a
    = ComponentType
        { getComponents : Model -> Array.Array (Maybe a)
        , setComponents : Array.Array (Maybe a) -> Model -> Model
        , entitySets : List EntitySetType
        }


{-| -}
get : EntityId -> ComponentType a -> Ecs -> Maybe a
get (EntityId entityId) (ComponentType componentType) (Ecs model) =
    Array.get entityId (componentType.getComponents model)
        |> Maybe.withDefault Nothing


{-| -}
insert : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insert (EntityId entityId) (ComponentType componentType) component (Ecs model) =
    let
        updatedModel =
            componentType.setComponents
                (Array.set entityId (Just component) (componentType.getComponents model))
                model
    in
    Ecs
        (List.foldl (insertEntityInSet entityId) updatedModel componentType.entitySets)


insertEntityInSet : Int -> EntitySetType -> Model -> Model
insertEntityInSet entityId entitySetType model =
    if entitySetType.member entityId model then
        entitySetType.setEntities
            (Set.insert entityId (entitySetType.getEntities model))
            model

    else
        model


{-| -}
update : EntityId -> ComponentType a -> (Maybe a -> Maybe a) -> Ecs -> Ecs
update entityId componentType updater ecs =
    let
        maybeComponent =
            get entityId componentType ecs
    in
    case ( maybeComponent, updater maybeComponent ) of
        ( _, Just component ) ->
            insert entityId componentType component ecs

        ( Just _, Nothing ) ->
            remove entityId componentType ecs

        ( Nothing, Nothing ) ->
            ecs


{-| -}
remove : EntityId -> ComponentType a -> Ecs -> Ecs
remove (EntityId entityId) (ComponentType componentType) (Ecs model) =
    componentType.entitySets
        |> List.foldl (removeEntityFromSet entityId) model
        |> componentType.setComponents
            (Array.set entityId Nothing (componentType.getComponents model))
        |> Ecs


removeEntityFromSet : Int -> EntitySetType -> Model -> Model
removeEntityFromSet entityId entitySetType model =
    entitySetType.setEntities
        (Set.remove entityId (entitySetType.getEntities model))
        model



-- NODES --


{-| -}
type NodeType node
    = NodeType
        { getEntities : Model -> Set.Set Int
        , getNode : Int -> Model -> Maybe node
        }


{-| -}
iterate :
    NodeType node
    -> (EntityId -> node -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterate (NodeType nodeType) callback ( Ecs model, context ) =
    Set.foldl
        (\entityId result ->
            case nodeType.getNode entityId model of
                Nothing ->
                    result

                Just node ->
                    callback (EntityId entityId) node result
        )
        ( Ecs model, context )
        (nodeType.getEntities model)


{-| -}
nodeSize : NodeType a -> Ecs -> Int
nodeSize (NodeType nodeType) (Ecs model) =
    Set.size (nodeType.getEntities model)



-- YOUR COMPONENT TYPES --


{-| -}
aComponent : ComponentType Components.A
aComponent =
    ComponentType
        { getComponents = .aComponents
        , setComponents = \components model -> { model | aComponents = components }
        , entitySets = [ aEntitySet, abEntitySet, abcEntitySet ]
        }


{-| -}
bComponent : ComponentType Components.B
bComponent =
    ComponentType
        { getComponents = .bComponents
        , setComponents = \components model -> { model | bComponents = components }
        , entitySets = [ abEntitySet, abcEntitySet ]
        }


{-| -}
cComponent : ComponentType Components.C
cComponent =
    ComponentType
        { getComponents = .cComponents
        , setComponents = \components model -> { model | cComponents = components }
        , entitySets = [ abcEntitySet ]
        }



-- YOUR NODES --


{-| -}
type alias ANode =
    { a : Components.A
    }


{-| -}
type alias AbNode =
    { a : Components.A
    , b : Components.B
    }


{-| -}
type alias AbcNode =
    { a : Components.A
    , b : Components.B
    , c : Components.C
    }



-- YOUR NODE TYPES --


{-| -}
aNode : NodeType ANode
aNode =
    NodeType
        { getEntities = .aEntities
        , getNode =
            \entityId model ->
                ANode
                    |> nextComponent model.aComponents entityId
        }


{-| -}
abNode : NodeType AbNode
abNode =
    NodeType
        { getEntities = .abEntities
        , getNode =
            \entityId model ->
                AbNode
                    |> nextComponent model.aComponents entityId
                    |> Maybe.andThen (nextComponent model.bComponents entityId)
        }


{-| -}
abcNode : NodeType AbcNode
abcNode =
    NodeType
        { getEntities = .abcEntities
        , getNode =
            \entityId model ->
                AbcNode
                    |> nextComponent model.aComponents entityId
                    |> Maybe.andThen (nextComponent model.bComponents entityId)
                    |> Maybe.andThen (nextComponent model.cComponents entityId)
        }


nextComponent : Array.Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent components entityId callback =
    Array.get entityId components
        |> Maybe.withDefault Nothing
        |> Maybe.map callback



-- YOUR ENTITY SET TYPES --


type alias EntitySetType =
    { getEntities : Model -> Set.Set Int
    , setEntities : Set.Set Int -> Model -> Model
    , member : Int -> Model -> Bool
    }


aEntitySet : EntitySetType
aEntitySet =
    { getEntities = .aEntities
    , setEntities = \entities model -> { model | aEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
    }


abEntitySet : EntitySetType
abEntitySet =
    { getEntities = .abEntities
    , setEntities = \entities model -> { model | abEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
                && isComponentsMember entityId model.bComponents
    }


abcEntitySet : EntitySetType
abcEntitySet =
    { getEntities = .abcEntities
    , setEntities = \entities model -> { model | abcEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
                && isComponentsMember entityId model.bComponents
                && isComponentsMember entityId model.cComponents
    }


isComponentsMember entityId components =
    case Array.get entityId components of
        Just (Just _) ->
            True

        _ ->
            False
