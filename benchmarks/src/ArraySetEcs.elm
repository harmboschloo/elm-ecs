-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#Ecs%3BComponents%2CA%3BComponents%2CB%3BComponents%2CC


module ArraySetEcs exposing
    ( AType
    , BType
    , CType
    , ComponentType
    , Ecs
    , EntityId
    , a
    , b
    , c
    , createEntity
    , destroyEntity
    , empty
    , getComponent
    , insertComponent
    , iterateEntitiesWithA
    , iterateEntitiesWithAB
    , iterateEntitiesWithABC
    , removeComponent
    , resetEntity
    )

import Array
    exposing
        ( Array
        )
import Components
    exposing
        ( A
        , B
        , C
        )
import Set
    exposing
        ( Set
        )



-- MODEL --


type Ecs
    = Ecs Model


type alias Model =
    { aComponents : Array (Maybe A)
    , bComponents : Array (Maybe B)
    , cComponents : Array (Maybe C)
    , aEntities : Set Int
    , aBEntities : Set Int
    , aBCEntities : Set Int
    , destroyedEntities : List Int
    }


empty : Ecs
empty =
    Ecs
        { aComponents = Array.empty
        , bComponents = Array.empty
        , cComponents = Array.empty
        , aEntities = Set.empty
        , aBEntities = Set.empty
        , aBCEntities = Set.empty
        , destroyedEntities = []
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs model) =
    case model.destroyedEntities of
        [] ->
            ( Ecs
                { model
                    | aComponents = Array.push Nothing model.aComponents
                    , bComponents = Array.push Nothing model.bComponents
                    , cComponents = Array.push Nothing model.cComponents
                }
            , EntityId (Array.length model.aComponents)
            )

        head :: tail ->
            ( Ecs { model | destroyedEntities = tail }
            , EntityId head
            )


destroyEntity : EntityId -> Ecs -> Ecs
destroyEntity (EntityId entityId) (Ecs model) =
    { model | destroyedEntities = entityId :: model.destroyedEntities }
        |> removeEntityComponents entityId
        |> Ecs


resetEntity : EntityId -> Ecs -> Ecs
resetEntity (EntityId entityId) (Ecs model) =
    Ecs (removeEntityComponents entityId model)


removeEntityComponents : Int -> Model -> Model
removeEntityComponents entityId model =
    { model
        | aComponents = Array.set entityId Nothing model.aComponents
        , bComponents = Array.set entityId Nothing model.bComponents
        , cComponents = Array.set entityId Nothing model.cComponents
        , aEntities = Set.remove entityId model.aEntities
        , aBEntities = Set.remove entityId model.aBEntities
        , aBCEntities = Set.remove entityId model.aBCEntities
    }



-- COMPONENTS --


insertComponent : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insertComponent (EntityId entityId) (ComponentType type_) component (Ecs model) =
    let
        updatedModel =
            type_.setComponents
                (Array.set entityId (Just component) (type_.getComponents model))
                model
    in
    Ecs
        (List.foldl (insertEntityInSet entityId) updatedModel type_.entitySets)


insertEntityInSet : Int -> EntitySetType -> Model -> Model
insertEntityInSet entityId entitySetType model =
    if entitySetType.member entityId model then
        entitySetType.setEntities
            (Set.insert entityId (entitySetType.getEntities model))
            model

    else
        model


removeComponent : EntityId -> ComponentType a -> Ecs -> Ecs
removeComponent (EntityId entityId) (ComponentType type_) (Ecs model) =
    type_.entitySets
        |> List.foldl (removeEntityFromSet entityId) model
        |> type_.setComponents
            (Array.set entityId Nothing (type_.getComponents model))
        |> Ecs


removeEntityFromSet : Int -> EntitySetType -> Model -> Model
removeEntityFromSet entityId entitySetType model =
    entitySetType.setEntities
        (Set.remove entityId (entitySetType.getEntities model))
        model


getComponent : EntityId -> ComponentType a -> Ecs -> Maybe a
getComponent (EntityId entityId) (ComponentType { getComponents }) (Ecs model) =
    Array.get entityId (getComponents model)
        |> Maybe.withDefault Nothing



-- ENTITY ITERATORS --


iterateEntitiesWithA :
    (EntityId -> A -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntitiesWithA callback ( Ecs model, x ) =
    Set.foldl
        (\entityId result ->
            callback (EntityId entityId)
                |> nextComponent model.aComponents entityId
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        model.aEntities


iterateEntitiesWithAB :
    (EntityId -> A -> B -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntitiesWithAB callback ( Ecs model, x ) =
    Set.foldl
        (\entityId result ->
            callback (EntityId entityId)
                |> nextComponent model.aComponents entityId
                |> Maybe.andThen (nextComponent model.bComponents entityId)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        model.aBEntities


iterateEntitiesWithABC :
    (EntityId -> A -> B -> C -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntitiesWithABC callback ( Ecs model, x ) =
    Set.foldl
        (\entityId result ->
            callback (EntityId entityId)
                |> nextComponent model.aComponents entityId
                |> Maybe.andThen (nextComponent model.bComponents entityId)
                |> Maybe.andThen (nextComponent model.cComponents entityId)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        model.aBCEntities


nextComponent : Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent components entityId callback =
    Array.get entityId components
        |> Maybe.withDefault Nothing
        |> Maybe.map callback



-- ENTITY SET TYPES --


type alias EntitySetType =
    { getEntities : Model -> Set Int
    , setEntities : Set Int -> Model -> Model
    , member : Int -> Model -> Bool
    }


aEntitySet : EntitySetType
aEntitySet =
    { getEntities = .aBEntities
    , setEntities = \entities model -> { model | aEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
    }


aBEntitySet : EntitySetType
aBEntitySet =
    { getEntities = .aBEntities
    , setEntities = \entities model -> { model | aBEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
                && isComponentsMember entityId model.bComponents
    }


aBCEntitySet : EntitySetType
aBCEntitySet =
    { getEntities = .aBCEntities
    , setEntities = \entities model -> { model | aBCEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.aComponents
                && isComponentsMember entityId model.bComponents
                && isComponentsMember entityId model.cComponents
    }


isComponentsMember entityId components =
    case Array.get entityId components of
        Just (Just _) ->
            True

        _ ->
            False



-- COMPONENT TYPES --


type ComponentType a
    = ComponentType
        { getComponents : Model -> Array (Maybe a)
        , setComponents : Array (Maybe a) -> Model -> Model
        , entitySets : List EntitySetType
        }


type alias AType =
    ComponentType A


a : AType
a =
    ComponentType
        { getComponents = .aComponents
        , setComponents = setAComponents
        , entitySets = [ aEntitySet, aBEntitySet, aBCEntitySet ]
        }


setAComponents : Array (Maybe A) -> Model -> Model
setAComponents components model =
    { model | aComponents = components }


type alias BType =
    ComponentType B


b : BType
b =
    ComponentType
        { getComponents = .bComponents
        , setComponents = setBComponents
        , entitySets = [ aBEntitySet, aBCEntitySet ]
        }


setBComponents : Array (Maybe B) -> Model -> Model
setBComponents components model =
    { model | bComponents = components }


type alias CType =
    ComponentType C


c : CType
c =
    ComponentType
        { getComponents = .cComponents
        , setComponents = setCComponents
        , entitySets = [ aBCEntitySet ]
        }


setCComponents : Array (Maybe C) -> Model -> Model
setCComponents components model =
    { model | cComponents = components }
