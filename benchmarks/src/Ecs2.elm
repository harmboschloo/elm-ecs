-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#Ecs%3BComponents%2CA%3BComponents%2CB%3BComponents%2CC


module Ecs2 exposing
    ( AType
    , BType
    , CType
    , ComponentType
    , Ecs
    , EntityId
    , a
    , b
    , c
    , createEntity
    , destroyEntity
    , empty
    , getComponent
    , insertComponent
    , iterateEntities
    , iterateEntities2
    , iterateEntities3
    , removeComponent
    , resetEntity
    )

import Array
    exposing
        ( Array
        )
import Components
    exposing
        ( A
        , B
        , C
        )



-- MODEL --


type Ecs
    = Ecs Model


type alias Model =
    { aComponents : Array (Maybe A)
    , bComponents : Array (Maybe B)
    , cComponents : Array (Maybe C)
    , destroyedEntities : List Int
    }


empty : Ecs
empty =
    Ecs
        { aComponents = Array.empty
        , bComponents = Array.empty
        , cComponents = Array.empty
        , destroyedEntities = []
        }



-- ENTITIES --


type EntityId
    = EntityId Int


createEntity : Ecs -> ( Ecs, EntityId )
createEntity (Ecs model) =
    case model.destroyedEntities of
        [] ->
            ( Ecs
                { model
                    | aComponents = Array.push Nothing model.aComponents
                    , bComponents = Array.push Nothing model.bComponents
                    , cComponents = Array.push Nothing model.cComponents
                }
            , EntityId (Array.length model.aComponents)
            )

        head :: tail ->
            ( Ecs { model | destroyedEntities = tail }
            , EntityId head
            )


destroyEntity : EntityId -> Ecs -> Ecs
destroyEntity (EntityId entityId) (Ecs model) =
    { model | destroyedEntities = entityId :: model.destroyedEntities }
        |> removeEntityComponents entityId
        |> Ecs


resetEntity : EntityId -> Ecs -> Ecs
resetEntity (EntityId entityId) (Ecs model) =
    Ecs (removeEntityComponents entityId model)


removeEntityComponents : Int -> Model -> Model
removeEntityComponents entityId model =
    { model
        | aComponents = Array.set entityId Nothing model.aComponents
        , bComponents = Array.set entityId Nothing model.bComponents
        , cComponents = Array.set entityId Nothing model.cComponents
    }



-- COMPONENTS --


insertComponent : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insertComponent (EntityId entityId) (ComponentType type_) component (Ecs model) =
    Ecs
        (type_.setComponents
            (Array.set entityId (Just component) (type_.getComponents model))
            model
        )


removeComponent : EntityId -> ComponentType a -> Ecs -> Ecs
removeComponent (EntityId entityId) (ComponentType type_) (Ecs model) =
    Ecs
        (type_.setComponents
            (Array.set entityId Nothing (type_.getComponents model))
            model
        )


getComponent : EntityId -> ComponentType a -> Ecs -> Maybe a
getComponent (EntityId entityId) (ComponentType { getComponents }) (Ecs model) =
    Array.get entityId (getComponents model)
        |> Maybe.withDefault Nothing



-- ENTITY ITERATORS --


iterateEntities :
    ComponentType a
    -> (EntityId -> a -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntities (ComponentType type_) callback ( Ecs model, x ) =
    Array.foldl
        (\maybeComponent1 ( entityId, result ) ->
            ( entityId + 1
            , maybeComponent1
                |> Maybe.map (callback (EntityId entityId))
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
            )
        )
        ( 0, ( Ecs model, x ) )
        (type_.getComponents model)
        |> Tuple.second


iterateEntities2 :
    ComponentType c1
    -> ComponentType c2
    -> (EntityId -> c1 -> c2 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntities2 (ComponentType type1) (ComponentType type2) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model
    in
    Array.foldl
        (\maybeComponent1 ( entityId, result ) ->
            ( entityId + 1
            , maybeComponent1
                |> Maybe.map (callback (EntityId entityId))
                |> Maybe.andThen (nextComponent components2 entityId)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
            )
        )
        ( 0, ( Ecs model, x ) )
        components1
        |> Tuple.second


iterateEntities3 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> (EntityId -> c1 -> c2 -> c3 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterateEntities3 (ComponentType type1) (ComponentType type2) (ComponentType type3) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model
    in
    Array.foldl
        (\maybeComponent1 ( entityId, result ) ->
            ( entityId + 1
            , maybeComponent1
                |> Maybe.map (callback (EntityId entityId))
                |> Maybe.andThen (nextComponent components2 entityId)
                |> Maybe.andThen (nextComponent components3 entityId)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
            )
        )
        ( 0, ( Ecs model, x ) )
        components1
        |> Tuple.second


nextComponent : Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent components entityId callback =
    Array.get entityId components
        |> Maybe.withDefault Nothing
        |> Maybe.map callback



-- COMPONENT TYPES --


type ComponentType a
    = ComponentType
        { getComponents : Model -> Array (Maybe a)
        , setComponents : Array (Maybe a) -> Model -> Model
        }


type alias AType =
    ComponentType A


a : AType
a =
    ComponentType
        { getComponents = .aComponents
        , setComponents = setAComponents
        }


setAComponents : Array (Maybe A) -> Model -> Model
setAComponents components model =
    { model | aComponents = components }


type alias BType =
    ComponentType B


b : BType
b =
    ComponentType
        { getComponents = .bComponents
        , setComponents = setBComponents
        }


setBComponents : Array (Maybe B) -> Model -> Model
setBComponents components model =
    { model | bComponents = components }


type alias CType =
    ComponentType C


c : CType
c =
    ComponentType
        { getComponents = .cComponents
        , setComponents = setCComponents
        }


setCComponents : Array (Maybe C) -> Model -> Model
setCComponents components model =
    { model | cComponents = components }
