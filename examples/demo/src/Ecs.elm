-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/ui/#%7B%22ecs%22%3A%5B%22Ecs%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22Ai%22%5D%2C%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Scale%22%5D%2C%5B%22Components%22%2C%22ScaleAnimation%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%2C%5B%22Components.Transforms%22%2C%22Transforms%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D


module Ecs exposing
    ( Ecs, empty
    , EntityId, create, destroy, reset, size, activeSize, idToInt, intToId
    , ComponentType, get, insert, update, remove
    , iterate, iterate2, iterate3, iterate4, iterate5, iterate6, iterate7, iterate8, iterate9, iterate10, iterate11, iterate12
    , aiComponent, collectableComponent, collectorComponent, controlsComponent, keyControlsMapComponent, motionComponent, positionComponent, scaleComponent, scaleAnimationComponent, spriteComponent, transformsComponent, velocityComponent
    )

{-| Your Entitiy-Component-System.


# Model

@docs Ecs, empty


# Entities

@docs EntityId, create, destroy, reset, size, activeSize, idToInt, intToId


# Components

@docs ComponentType, get, insert, update, remove


# Iterate Entities

@docs iterate, iterate2, iterate3, iterate4, iterate5, iterate6, iterate7, iterate8, iterate9, iterate10, iterate11, iterate12


# Your Component Types

@docs aiComponent, collectableComponent, collectorComponent, controlsComponent, keyControlsMapComponent, motionComponent, positionComponent, scaleComponent, scaleAnimationComponent, spriteComponent, transformsComponent, velocityComponent

-}

import Components
import Components.Controls
import Components.Transforms
import Dict



-- MODEL --


{-| -}
type Ecs
    = Ecs Model


type alias Model =
    { aiComponents : Dict.Dict Int Components.Ai
    , collectableComponents : Dict.Dict Int Components.Collectable
    , collectorComponents : Dict.Dict Int Components.Collector
    , controlsComponents : Dict.Dict Int Components.Controls.Controls
    , keyControlsMapComponents : Dict.Dict Int Components.KeyControlsMap
    , motionComponents : Dict.Dict Int Components.Motion
    , positionComponents : Dict.Dict Int Components.Position
    , scaleComponents : Dict.Dict Int Components.Scale
    , scaleAnimationComponents : Dict.Dict Int Components.ScaleAnimation
    , spriteComponents : Dict.Dict Int Components.Sprite
    , transformsComponents : Dict.Dict Int Components.Transforms.Transforms
    , velocityComponents : Dict.Dict Int Components.Velocity
    , numberOfCreatedEntities : Int
    , destroyedEntities : List Int
    }


{-| -}
empty : Ecs
empty =
    Ecs
        { aiComponents = Dict.empty
        , collectableComponents = Dict.empty
        , collectorComponents = Dict.empty
        , controlsComponents = Dict.empty
        , keyControlsMapComponents = Dict.empty
        , motionComponents = Dict.empty
        , positionComponents = Dict.empty
        , scaleComponents = Dict.empty
        , scaleAnimationComponents = Dict.empty
        , spriteComponents = Dict.empty
        , transformsComponents = Dict.empty
        , velocityComponents = Dict.empty
        , numberOfCreatedEntities = 0
        , destroyedEntities = []
        }



-- ENTITIES --


{-| -}
type EntityId
    = EntityId Int


{-| -}
create : Ecs -> ( Ecs, EntityId )
create (Ecs model) =
    case model.destroyedEntities of
        [] ->
            ( Ecs { model | numberOfCreatedEntities = model.numberOfCreatedEntities + 1 }
            , EntityId model.numberOfCreatedEntities
            )

        head :: tail ->
            ( Ecs { model | destroyedEntities = tail }
            , EntityId head
            )


{-| -}
destroy : EntityId -> Ecs -> Ecs
destroy (EntityId entityId) (Ecs model) =
    { model | destroyedEntities = entityId :: model.destroyedEntities }
        |> resetEntity entityId
        |> Ecs


{-| -}
reset : EntityId -> Ecs -> Ecs
reset (EntityId entityId) (Ecs model) =
    Ecs (resetEntity entityId model)


resetEntity : Int -> Model -> Model
resetEntity entityId model =
    { model
        | aiComponents = Dict.remove entityId model.aiComponents
        , collectableComponents = Dict.remove entityId model.collectableComponents
        , collectorComponents = Dict.remove entityId model.collectorComponents
        , controlsComponents = Dict.remove entityId model.controlsComponents
        , keyControlsMapComponents = Dict.remove entityId model.keyControlsMapComponents
        , motionComponents = Dict.remove entityId model.motionComponents
        , positionComponents = Dict.remove entityId model.positionComponents
        , scaleComponents = Dict.remove entityId model.scaleComponents
        , scaleAnimationComponents = Dict.remove entityId model.scaleAnimationComponents
        , spriteComponents = Dict.remove entityId model.spriteComponents
        , transformsComponents = Dict.remove entityId model.transformsComponents
        , velocityComponents = Dict.remove entityId model.velocityComponents
    }


{-| -}
size : Ecs -> Int
size (Ecs model) =
    model.numberOfCreatedEntities


{-| -}
activeSize : Ecs -> Int
activeSize (Ecs model) =
    model.numberOfCreatedEntities - List.length model.destroyedEntities


{-| -}
idToInt : EntityId -> Int
idToInt (EntityId id) =
    id


{-| -}
intToId : Int -> Ecs -> Maybe EntityId
intToId id ecs =
    if id < size ecs then
        Just (EntityId id)

    else
        Nothing



-- COMPONENTS --


{-| -}
type ComponentType a
    = ComponentType
        { getComponents : Model -> Dict.Dict Int a
        , setComponents : Dict.Dict Int a -> Model -> Model
        }


{-| -}
get : EntityId -> ComponentType a -> Ecs -> Maybe a
get (EntityId entityId) (ComponentType { getComponents }) (Ecs model) =
    Dict.get entityId (getComponents model)


{-| -}
insert : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insert (EntityId entityId) (ComponentType componentType) component (Ecs model) =
    Ecs
        (componentType.setComponents
            (Dict.insert entityId component (componentType.getComponents model))
            model
        )


{-| -}
update : EntityId -> ComponentType a -> (Maybe a -> Maybe a) -> Ecs -> Ecs
update (EntityId entityId) (ComponentType componentType) updater (Ecs model) =
    Ecs
        (componentType.setComponents
            (Dict.update entityId updater (componentType.getComponents model))
            model
        )


{-| -}
remove : EntityId -> ComponentType a -> Ecs -> Ecs
remove (EntityId entityId) (ComponentType componentType) (Ecs model) =
    Ecs
        (componentType.setComponents
            (Dict.remove entityId (componentType.getComponents model))
            model
        )



-- ITERATE ENTITIES --


{-| -}
iterate :
    ComponentType a
    -> (EntityId -> a -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate (ComponentType componentType) callback ( Ecs model, x ) =
    Dict.foldl
        (EntityId >> callback)
        ( Ecs model, x )
        (componentType.getComponents model)


{-| -}
iterate2 :
    ComponentType c1
    -> ComponentType c2
    -> (EntityId -> c1 -> c2 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate2 (ComponentType type1) (ComponentType type2) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate3 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> (EntityId -> c1 -> c2 -> c3 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate3 (ComponentType type1) (ComponentType type2) (ComponentType type3) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate4 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate4 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate5 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate5 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate6 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate6 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate7 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate7 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate8 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> ComponentType c8
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> c8 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate8 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) (ComponentType type8) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model

        components8 =
            type8.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.andThen (next entityId components8)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate9 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> ComponentType c8
    -> ComponentType c9
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> c8 -> c9 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate9 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) (ComponentType type8) (ComponentType type9) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model

        components8 =
            type8.getComponents model

        components9 =
            type9.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.andThen (next entityId components8)
                |> Maybe.andThen (next entityId components9)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate10 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> ComponentType c8
    -> ComponentType c9
    -> ComponentType c10
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> c8 -> c9 -> c10 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate10 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) (ComponentType type8) (ComponentType type9) (ComponentType type10) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model

        components8 =
            type8.getComponents model

        components9 =
            type9.getComponents model

        components10 =
            type10.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.andThen (next entityId components8)
                |> Maybe.andThen (next entityId components9)
                |> Maybe.andThen (next entityId components10)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate11 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> ComponentType c8
    -> ComponentType c9
    -> ComponentType c10
    -> ComponentType c11
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> c8 -> c9 -> c10 -> c11 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate11 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) (ComponentType type8) (ComponentType type9) (ComponentType type10) (ComponentType type11) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model

        components8 =
            type8.getComponents model

        components9 =
            type9.getComponents model

        components10 =
            type10.getComponents model

        components11 =
            type11.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.andThen (next entityId components8)
                |> Maybe.andThen (next entityId components9)
                |> Maybe.andThen (next entityId components10)
                |> Maybe.andThen (next entityId components11)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


{-| -}
iterate12 :
    ComponentType c1
    -> ComponentType c2
    -> ComponentType c3
    -> ComponentType c4
    -> ComponentType c5
    -> ComponentType c6
    -> ComponentType c7
    -> ComponentType c8
    -> ComponentType c9
    -> ComponentType c10
    -> ComponentType c11
    -> ComponentType c12
    -> (EntityId -> c1 -> c2 -> c3 -> c4 -> c5 -> c6 -> c7 -> c8 -> c9 -> c10 -> c11 -> c12 -> ( Ecs, x ) -> ( Ecs, x ))
    -> ( Ecs, x )
    -> ( Ecs, x )
iterate12 (ComponentType type1) (ComponentType type2) (ComponentType type3) (ComponentType type4) (ComponentType type5) (ComponentType type6) (ComponentType type7) (ComponentType type8) (ComponentType type9) (ComponentType type10) (ComponentType type11) (ComponentType type12) callback ( Ecs model, x ) =
    let
        components1 =
            type1.getComponents model

        components2 =
            type2.getComponents model

        components3 =
            type3.getComponents model

        components4 =
            type4.getComponents model

        components5 =
            type5.getComponents model

        components6 =
            type6.getComponents model

        components7 =
            type7.getComponents model

        components8 =
            type8.getComponents model

        components9 =
            type9.getComponents model

        components10 =
            type10.getComponents model

        components11 =
            type11.getComponents model

        components12 =
            type12.getComponents model
    in
    Dict.foldl
        (\entityId component1 result ->
            callback (EntityId entityId) component1
                |> next entityId components2
                |> Maybe.andThen (next entityId components3)
                |> Maybe.andThen (next entityId components4)
                |> Maybe.andThen (next entityId components5)
                |> Maybe.andThen (next entityId components6)
                |> Maybe.andThen (next entityId components7)
                |> Maybe.andThen (next entityId components8)
                |> Maybe.andThen (next entityId components9)
                |> Maybe.andThen (next entityId components10)
                |> Maybe.andThen (next entityId components11)
                |> Maybe.andThen (next entityId components12)
                |> Maybe.map ((|>) result)
                |> Maybe.withDefault result
        )
        ( Ecs model, x )
        components1


next : Int -> Dict.Dict Int a -> (a -> b) -> Maybe b
next entityId components callback =
    Dict.get entityId components |> Maybe.map callback



-- YOUR COMPONENT TYPES --


{-| -}
aiComponent : ComponentType Components.Ai
aiComponent =
    ComponentType
        { getComponents = .aiComponents
        , setComponents = \components model -> { model | aiComponents = components }
        }


{-| -}
collectableComponent : ComponentType Components.Collectable
collectableComponent =
    ComponentType
        { getComponents = .collectableComponents
        , setComponents = \components model -> { model | collectableComponents = components }
        }


{-| -}
collectorComponent : ComponentType Components.Collector
collectorComponent =
    ComponentType
        { getComponents = .collectorComponents
        , setComponents = \components model -> { model | collectorComponents = components }
        }


{-| -}
controlsComponent : ComponentType Components.Controls.Controls
controlsComponent =
    ComponentType
        { getComponents = .controlsComponents
        , setComponents = \components model -> { model | controlsComponents = components }
        }


{-| -}
keyControlsMapComponent : ComponentType Components.KeyControlsMap
keyControlsMapComponent =
    ComponentType
        { getComponents = .keyControlsMapComponents
        , setComponents = \components model -> { model | keyControlsMapComponents = components }
        }


{-| -}
motionComponent : ComponentType Components.Motion
motionComponent =
    ComponentType
        { getComponents = .motionComponents
        , setComponents = \components model -> { model | motionComponents = components }
        }


{-| -}
positionComponent : ComponentType Components.Position
positionComponent =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = \components model -> { model | positionComponents = components }
        }


{-| -}
scaleComponent : ComponentType Components.Scale
scaleComponent =
    ComponentType
        { getComponents = .scaleComponents
        , setComponents = \components model -> { model | scaleComponents = components }
        }


{-| -}
scaleAnimationComponent : ComponentType Components.ScaleAnimation
scaleAnimationComponent =
    ComponentType
        { getComponents = .scaleAnimationComponents
        , setComponents = \components model -> { model | scaleAnimationComponents = components }
        }


{-| -}
spriteComponent : ComponentType Components.Sprite
spriteComponent =
    ComponentType
        { getComponents = .spriteComponents
        , setComponents = \components model -> { model | spriteComponents = components }
        }


{-| -}
transformsComponent : ComponentType Components.Transforms.Transforms
transformsComponent =
    ComponentType
        { getComponents = .transformsComponents
        , setComponents = \components model -> { model | transformsComponents = components }
        }


{-| -}
velocityComponent : ComponentType Components.Velocity
velocityComponent =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = \components model -> { model | velocityComponents = components }
        }
