-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#%7B%22ecs%22%3A%5B%22Ecs%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22Ai%22%5D%2C%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Scale%22%5D%2C%5B%22Components%22%2C%22ScaleAnimation%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%2C%5B%22Components.Transforms%22%2C%22Transforms%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%2C%22nodes%22%3A%5B%7B%22name%22%3A%22collectable%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collectable%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22collector%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Collector%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%2C%7B%22name%22%3A%22keyControls%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22KeyControlsMap%22%5D%5D%7D%2C%7B%22name%22%3A%22motionControl%22%2C%22components%22%3A%5B%5B%22Components.Controls%22%2C%22Controls%22%5D%2C%5B%22Components%22%2C%22Motion%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22movement%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22render%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Sprite%22%5D%5D%7D%2C%7B%22name%22%3A%22scaleAnimation%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22ScaleAnimation%22%5D%5D%7D%2C%7B%22name%22%3A%22transform%22%2C%22components%22%3A%5B%5B%22Components.Transforms%22%2C%22Transforms%22%5D%5D%7D%5D%7D


module Ecs exposing
    ( Ecs, empty
    , EntityId, create, destroy, reset, size, activeSize, idToInt, intToId
    , ComponentType, get, insert, update, remove
    , NodeType, iterate, nodeSize
    , aiComponent, collectableComponent, collectorComponent, controlsComponent, keyControlsMapComponent, motionComponent, positionComponent, scaleComponent, scaleAnimationComponent, spriteComponent, transformsComponent, velocityComponent
    , CollectableNode, CollectorNode, KeyControlsNode, MotionControlNode, MovementNode, RenderNode, ScaleAnimationNode, TransformNode
    , collectableNode, collectorNode, keyControlsNode, motionControlNode, movementNode, renderNode, scaleAnimationNode, transformNode
    )

{-| Your Entitiy-Component-System.


# Model

@docs Ecs, empty


# Entities

@docs EntityId, create, destroy, reset, size, activeSize, idToInt, intToId


# Components

@docs ComponentType, get, insert, update, remove


# Nodes

@docs NodeType, iterate, nodeSize


# Your Component Types

@docs aiComponent, collectableComponent, collectorComponent, controlsComponent, keyControlsMapComponent, motionComponent, positionComponent, scaleComponent, scaleAnimationComponent, spriteComponent, transformsComponent, velocityComponent


# Your Nodes

@docs CollectableNode, CollectorNode, KeyControlsNode, MotionControlNode, MovementNode, RenderNode, ScaleAnimationNode, TransformNode


# Your Node Types

@docs collectableNode, collectorNode, keyControlsNode, motionControlNode, movementNode, renderNode, scaleAnimationNode, transformNode

-}

import Array
import Components
import Components.Controls
import Components.Transforms
import Set



-- MODEL --


{-| -}
type Ecs
    = Ecs Model


type alias Model =
    { aiComponents : Array.Array (Maybe Components.Ai)
    , collectableComponents : Array.Array (Maybe Components.Collectable)
    , collectorComponents : Array.Array (Maybe Components.Collector)
    , controlsComponents : Array.Array (Maybe Components.Controls.Controls)
    , keyControlsMapComponents : Array.Array (Maybe Components.KeyControlsMap)
    , motionComponents : Array.Array (Maybe Components.Motion)
    , positionComponents : Array.Array (Maybe Components.Position)
    , scaleComponents : Array.Array (Maybe Components.Scale)
    , scaleAnimationComponents : Array.Array (Maybe Components.ScaleAnimation)
    , spriteComponents : Array.Array (Maybe Components.Sprite)
    , transformsComponents : Array.Array (Maybe Components.Transforms.Transforms)
    , velocityComponents : Array.Array (Maybe Components.Velocity)
    , collectableEntities : Set.Set Int
    , collectorEntities : Set.Set Int
    , keyControlsEntities : Set.Set Int
    , motionControlEntities : Set.Set Int
    , movementEntities : Set.Set Int
    , renderEntities : Set.Set Int
    , scaleAnimationEntities : Set.Set Int
    , transformEntities : Set.Set Int
    , destroyedEntitiesCache : List Int
    }


{-| -}
empty : Ecs
empty =
    Ecs
        { aiComponents = Array.empty
        , collectableComponents = Array.empty
        , collectorComponents = Array.empty
        , controlsComponents = Array.empty
        , keyControlsMapComponents = Array.empty
        , motionComponents = Array.empty
        , positionComponents = Array.empty
        , scaleComponents = Array.empty
        , scaleAnimationComponents = Array.empty
        , spriteComponents = Array.empty
        , transformsComponents = Array.empty
        , velocityComponents = Array.empty
        , collectableEntities = Set.empty
        , collectorEntities = Set.empty
        , keyControlsEntities = Set.empty
        , motionControlEntities = Set.empty
        , movementEntities = Set.empty
        , renderEntities = Set.empty
        , scaleAnimationEntities = Set.empty
        , transformEntities = Set.empty
        , destroyedEntitiesCache = []
        }



-- ENTITIES --


{-| -}
type EntityId
    = EntityId Int


{-| -}
create : Ecs -> ( Ecs, EntityId )
create (Ecs model) =
    case model.destroyedEntitiesCache of
        [] ->
            ( Ecs
                { model
                    | aiComponents = Array.push Nothing model.aiComponents
                    , collectableComponents = Array.push Nothing model.collectableComponents
                    , collectorComponents = Array.push Nothing model.collectorComponents
                    , controlsComponents = Array.push Nothing model.controlsComponents
                    , keyControlsMapComponents = Array.push Nothing model.keyControlsMapComponents
                    , motionComponents = Array.push Nothing model.motionComponents
                    , positionComponents = Array.push Nothing model.positionComponents
                    , scaleComponents = Array.push Nothing model.scaleComponents
                    , scaleAnimationComponents = Array.push Nothing model.scaleAnimationComponents
                    , spriteComponents = Array.push Nothing model.spriteComponents
                    , transformsComponents = Array.push Nothing model.transformsComponents
                    , velocityComponents = Array.push Nothing model.velocityComponents
                }
            , EntityId (entitiesSize model)
            )

        head :: tail ->
            ( Ecs { model | destroyedEntitiesCache = tail }
            , EntityId head
            )


{-| -}
destroy : EntityId -> Ecs -> Ecs
destroy (EntityId entityId) (Ecs model) =
    { model | destroyedEntitiesCache = entityId :: model.destroyedEntitiesCache }
        |> resetEntity entityId
        |> Ecs


{-| -}
reset : EntityId -> Ecs -> Ecs
reset (EntityId entityId) (Ecs model) =
    Ecs (resetEntity entityId model)


resetEntity : Int -> Model -> Model
resetEntity entityId model =
    { model
        | aiComponents = Array.set entityId Nothing model.aiComponents
        , collectableComponents = Array.set entityId Nothing model.collectableComponents
        , collectorComponents = Array.set entityId Nothing model.collectorComponents
        , controlsComponents = Array.set entityId Nothing model.controlsComponents
        , keyControlsMapComponents = Array.set entityId Nothing model.keyControlsMapComponents
        , motionComponents = Array.set entityId Nothing model.motionComponents
        , positionComponents = Array.set entityId Nothing model.positionComponents
        , scaleComponents = Array.set entityId Nothing model.scaleComponents
        , scaleAnimationComponents = Array.set entityId Nothing model.scaleAnimationComponents
        , spriteComponents = Array.set entityId Nothing model.spriteComponents
        , transformsComponents = Array.set entityId Nothing model.transformsComponents
        , velocityComponents = Array.set entityId Nothing model.velocityComponents
        , collectableEntities = Set.remove entityId model.collectableEntities
        , collectorEntities = Set.remove entityId model.collectorEntities
        , keyControlsEntities = Set.remove entityId model.keyControlsEntities
        , motionControlEntities = Set.remove entityId model.motionControlEntities
        , movementEntities = Set.remove entityId model.movementEntities
        , renderEntities = Set.remove entityId model.renderEntities
        , scaleAnimationEntities = Set.remove entityId model.scaleAnimationEntities
        , transformEntities = Set.remove entityId model.transformEntities
    }


{-| -}
size : Ecs -> Int
size (Ecs model) =
    entitiesSize model


{-| -}
activeSize : Ecs -> Int
activeSize (Ecs model) =
    entitiesSize model - List.length model.destroyedEntitiesCache


entitiesSize : Model -> Int
entitiesSize model =
    Array.length model.aiComponents


{-| -}
idToInt : EntityId -> Int
idToInt (EntityId id) =
    id


{-| -}
intToId : Int -> Ecs -> Maybe EntityId
intToId id ecs =
    if id < size ecs then
        Just (EntityId id)

    else
        Nothing



-- COMPONENTS --


{-| -}
type ComponentType a
    = ComponentType
        { getComponents : Model -> Array.Array (Maybe a)
        , setComponents : Array.Array (Maybe a) -> Model -> Model
        , entitySets : List EntitySetType
        }


{-| -}
get : EntityId -> ComponentType a -> Ecs -> Maybe a
get (EntityId entityId) (ComponentType componentType) (Ecs model) =
    Array.get entityId (componentType.getComponents model)
        |> Maybe.withDefault Nothing


{-| -}
insert : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insert (EntityId entityId) (ComponentType componentType) component (Ecs model) =
    let
        updatedModel =
            componentType.setComponents
                (Array.set entityId (Just component) (componentType.getComponents model))
                model
    in
    Ecs
        (List.foldl (insertEntityInSet entityId) updatedModel componentType.entitySets)


insertEntityInSet : Int -> EntitySetType -> Model -> Model
insertEntityInSet entityId entitySetType model =
    if entitySetType.member entityId model then
        entitySetType.setEntities
            (Set.insert entityId (entitySetType.getEntities model))
            model

    else
        model


{-| -}
update : EntityId -> ComponentType a -> (Maybe a -> Maybe a) -> Ecs -> Ecs
update entityId componentType updater ecs =
    let
        maybeComponent =
            get entityId componentType ecs
    in
    case ( maybeComponent, updater maybeComponent ) of
        ( _, Just component ) ->
            insert entityId componentType component ecs

        ( Just _, Nothing ) ->
            remove entityId componentType ecs

        ( Nothing, Nothing ) ->
            ecs


{-| -}
remove : EntityId -> ComponentType a -> Ecs -> Ecs
remove (EntityId entityId) (ComponentType componentType) (Ecs model) =
    componentType.entitySets
        |> List.foldl (removeEntityFromSet entityId) model
        |> componentType.setComponents
            (Array.set entityId Nothing (componentType.getComponents model))
        |> Ecs


removeEntityFromSet : Int -> EntitySetType -> Model -> Model
removeEntityFromSet entityId entitySetType model =
    entitySetType.setEntities
        (Set.remove entityId (entitySetType.getEntities model))
        model



-- NODES --


{-| -}
type NodeType node
    = NodeType
        { getEntities : Model -> Set.Set Int
        , getNode : Int -> Model -> Maybe node
        }


{-| -}
iterate :
    NodeType node
    -> (EntityId -> node -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterate (NodeType nodeType) callback ( Ecs model, context ) =
    Set.foldl
        (\entityId result ->
            case nodeType.getNode entityId model of
                Nothing ->
                    result

                Just node ->
                    callback (EntityId entityId) node result
        )
        ( Ecs model, context )
        (nodeType.getEntities model)


{-| -}
nodeSize : NodeType a -> Ecs -> Int
nodeSize (NodeType nodeType) (Ecs model) =
    Set.size (nodeType.getEntities model)



-- YOUR COMPONENT TYPES --


{-| -}
aiComponent : ComponentType Components.Ai
aiComponent =
    ComponentType
        { getComponents = .aiComponents
        , setComponents = \components model -> { model | aiComponents = components }
        , entitySets = []
        }


{-| -}
collectableComponent : ComponentType Components.Collectable
collectableComponent =
    ComponentType
        { getComponents = .collectableComponents
        , setComponents = \components model -> { model | collectableComponents = components }
        , entitySets = [ collectableEntitySet ]
        }


{-| -}
collectorComponent : ComponentType Components.Collector
collectorComponent =
    ComponentType
        { getComponents = .collectorComponents
        , setComponents = \components model -> { model | collectorComponents = components }
        , entitySets = [ collectorEntitySet ]
        }


{-| -}
controlsComponent : ComponentType Components.Controls.Controls
controlsComponent =
    ComponentType
        { getComponents = .controlsComponents
        , setComponents = \components model -> { model | controlsComponents = components }
        , entitySets = [ keyControlsEntitySet, motionControlEntitySet ]
        }


{-| -}
keyControlsMapComponent : ComponentType Components.KeyControlsMap
keyControlsMapComponent =
    ComponentType
        { getComponents = .keyControlsMapComponents
        , setComponents = \components model -> { model | keyControlsMapComponents = components }
        , entitySets = [ keyControlsEntitySet ]
        }


{-| -}
motionComponent : ComponentType Components.Motion
motionComponent =
    ComponentType
        { getComponents = .motionComponents
        , setComponents = \components model -> { model | motionComponents = components }
        , entitySets = [ motionControlEntitySet ]
        }


{-| -}
positionComponent : ComponentType Components.Position
positionComponent =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = \components model -> { model | positionComponents = components }
        , entitySets = [ collectableEntitySet, collectorEntitySet, motionControlEntitySet, movementEntitySet, renderEntitySet ]
        }


{-| -}
scaleComponent : ComponentType Components.Scale
scaleComponent =
    ComponentType
        { getComponents = .scaleComponents
        , setComponents = \components model -> { model | scaleComponents = components }
        , entitySets = []
        }


{-| -}
scaleAnimationComponent : ComponentType Components.ScaleAnimation
scaleAnimationComponent =
    ComponentType
        { getComponents = .scaleAnimationComponents
        , setComponents = \components model -> { model | scaleAnimationComponents = components }
        , entitySets = [ scaleAnimationEntitySet ]
        }


{-| -}
spriteComponent : ComponentType Components.Sprite
spriteComponent =
    ComponentType
        { getComponents = .spriteComponents
        , setComponents = \components model -> { model | spriteComponents = components }
        , entitySets = [ renderEntitySet ]
        }


{-| -}
transformsComponent : ComponentType Components.Transforms.Transforms
transformsComponent =
    ComponentType
        { getComponents = .transformsComponents
        , setComponents = \components model -> { model | transformsComponents = components }
        , entitySets = [ transformEntitySet ]
        }


{-| -}
velocityComponent : ComponentType Components.Velocity
velocityComponent =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = \components model -> { model | velocityComponents = components }
        , entitySets = [ motionControlEntitySet, movementEntitySet ]
        }



-- YOUR NODES --


{-| -}
type alias CollectableNode =
    { collectable : Components.Collectable
    , position : Components.Position
    }


{-| -}
type alias CollectorNode =
    { collector : Components.Collector
    , position : Components.Position
    }


{-| -}
type alias KeyControlsNode =
    { controls : Components.Controls.Controls
    , keyControlsMap : Components.KeyControlsMap
    }


{-| -}
type alias MotionControlNode =
    { controls : Components.Controls.Controls
    , motion : Components.Motion
    , position : Components.Position
    , velocity : Components.Velocity
    }


{-| -}
type alias MovementNode =
    { position : Components.Position
    , velocity : Components.Velocity
    }


{-| -}
type alias RenderNode =
    { position : Components.Position
    , sprite : Components.Sprite
    }


{-| -}
type alias ScaleAnimationNode =
    { scaleAnimation : Components.ScaleAnimation
    }


{-| -}
type alias TransformNode =
    { transforms : Components.Transforms.Transforms
    }



-- YOUR NODE TYPES --


{-| -}
collectableNode : NodeType CollectableNode
collectableNode =
    NodeType
        { getEntities = .collectableEntities
        , getNode =
            \entityId model ->
                CollectableNode
                    |> nextComponent model.collectableComponents entityId
                    |> Maybe.andThen (nextComponent model.positionComponents entityId)
        }


{-| -}
collectorNode : NodeType CollectorNode
collectorNode =
    NodeType
        { getEntities = .collectorEntities
        , getNode =
            \entityId model ->
                CollectorNode
                    |> nextComponent model.collectorComponents entityId
                    |> Maybe.andThen (nextComponent model.positionComponents entityId)
        }


{-| -}
keyControlsNode : NodeType KeyControlsNode
keyControlsNode =
    NodeType
        { getEntities = .keyControlsEntities
        , getNode =
            \entityId model ->
                KeyControlsNode
                    |> nextComponent model.controlsComponents entityId
                    |> Maybe.andThen (nextComponent model.keyControlsMapComponents entityId)
        }


{-| -}
motionControlNode : NodeType MotionControlNode
motionControlNode =
    NodeType
        { getEntities = .motionControlEntities
        , getNode =
            \entityId model ->
                MotionControlNode
                    |> nextComponent model.controlsComponents entityId
                    |> Maybe.andThen (nextComponent model.motionComponents entityId)
                    |> Maybe.andThen (nextComponent model.positionComponents entityId)
                    |> Maybe.andThen (nextComponent model.velocityComponents entityId)
        }


{-| -}
movementNode : NodeType MovementNode
movementNode =
    NodeType
        { getEntities = .movementEntities
        , getNode =
            \entityId model ->
                MovementNode
                    |> nextComponent model.positionComponents entityId
                    |> Maybe.andThen (nextComponent model.velocityComponents entityId)
        }


{-| -}
renderNode : NodeType RenderNode
renderNode =
    NodeType
        { getEntities = .renderEntities
        , getNode =
            \entityId model ->
                RenderNode
                    |> nextComponent model.positionComponents entityId
                    |> Maybe.andThen (nextComponent model.spriteComponents entityId)
        }


{-| -}
scaleAnimationNode : NodeType ScaleAnimationNode
scaleAnimationNode =
    NodeType
        { getEntities = .scaleAnimationEntities
        , getNode =
            \entityId model ->
                ScaleAnimationNode
                    |> nextComponent model.scaleAnimationComponents entityId
        }


{-| -}
transformNode : NodeType TransformNode
transformNode =
    NodeType
        { getEntities = .transformEntities
        , getNode =
            \entityId model ->
                TransformNode
                    |> nextComponent model.transformsComponents entityId
        }


nextComponent : Array.Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent components entityId callback =
    Array.get entityId components
        |> Maybe.withDefault Nothing
        |> Maybe.map callback



-- YOUR ENTITY SET TYPES --


type alias EntitySetType =
    { getEntities : Model -> Set.Set Int
    , setEntities : Set.Set Int -> Model -> Model
    , member : Int -> Model -> Bool
    }


collectableEntitySet : EntitySetType
collectableEntitySet =
    { getEntities = .collectableEntities
    , setEntities = \entities model -> { model | collectableEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.collectableComponents
                && isComponentsMember entityId model.positionComponents
    }


collectorEntitySet : EntitySetType
collectorEntitySet =
    { getEntities = .collectorEntities
    , setEntities = \entities model -> { model | collectorEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.collectorComponents
                && isComponentsMember entityId model.positionComponents
    }


keyControlsEntitySet : EntitySetType
keyControlsEntitySet =
    { getEntities = .keyControlsEntities
    , setEntities = \entities model -> { model | keyControlsEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.controlsComponents
                && isComponentsMember entityId model.keyControlsMapComponents
    }


motionControlEntitySet : EntitySetType
motionControlEntitySet =
    { getEntities = .motionControlEntities
    , setEntities = \entities model -> { model | motionControlEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.controlsComponents
                && isComponentsMember entityId model.motionComponents
                && isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.velocityComponents
    }


movementEntitySet : EntitySetType
movementEntitySet =
    { getEntities = .movementEntities
    , setEntities = \entities model -> { model | movementEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.velocityComponents
    }


renderEntitySet : EntitySetType
renderEntitySet =
    { getEntities = .renderEntities
    , setEntities = \entities model -> { model | renderEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.spriteComponents
    }


scaleAnimationEntitySet : EntitySetType
scaleAnimationEntitySet =
    { getEntities = .scaleAnimationEntities
    , setEntities = \entities model -> { model | scaleAnimationEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.scaleAnimationComponents
    }


transformEntitySet : EntitySetType
transformEntitySet =
    { getEntities = .transformEntities
    , setEntities = \entities model -> { model | transformEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.transformsComponents
    }


isComponentsMember entityId components =
    case Array.get entityId components of
        Just (Just _) ->
            True

        _ ->
            False
