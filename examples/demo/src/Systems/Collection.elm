-- module Systems.Collection exposing (update)
-- import Components exposing (Collectable, Collector, Position, Velocity)
-- import Components.Transforms as Transforms
-- import Data.Animation as Animation
-- import Data.Bounds as Bounds
-- import Data.CollisionGrid as CollisionGrid exposing (CollisionGrid)
-- import Ease
-- import Ecs exposing (Ecs)
-- import State exposing (State)
-- import Entity exposing (Entity)
-- type alias CollectorData =
--     { id : Ecs.EntityId
--     , position : Position
--     , radius : Float
--     }
-- type alias CollectableData =
--     { id : Ecs.EntityId
--     , position : Position
--     }
-- gridConfig : CollisionGrid.Config
-- gridConfig =
--     { cellWidth = 60
--     , cellHeight = 60
--     }
-- update : ( Ecs, State ) -> ( Ecs, State )
-- update ( ecs, state ) =
--     let
--         ( _, collectorGrid ) =
--             Ecs.iterate2
--                 Ecs.collectorComponent
--                 Ecs.positionComponent
--                 insertCollector
--                 ( ecs, CollisionGrid.empty gridConfig )
--         ( _, collectableGrid ) =
--             Ecs.iterate2
--                 Ecs.collectableComponent
--                 Ecs.positionComponent
--                 insertCollectable
--                 ( ecs, CollisionGrid.empty gridConfig )
--     in
--     List.foldl
--         checkCollection
--         ( ecs, state )
--         (CollisionGrid.cellCollisionsBetween collectableGrid collectorGrid)
-- insertCollector :
--     Ecs.EntityId
--     -> Collector
--     -> Position
--     -> ( Ecs, CollisionGrid CollectorData )
--     -> ( Ecs, CollisionGrid CollectorData )
-- insertCollector entityId collector position ( ecs, grid ) =
--     ( ecs
--     , CollisionGrid.insert
--         (Bounds.fromPositionAndRadius position.x position.y collector.radius)
--         (CollectorData entityId position collector.radius)
--         grid
--     )
-- insertCollectable :
--     Ecs.EntityId
--     -> Collectable
--     -> Position
--     -> ( Ecs, CollisionGrid CollectableData )
--     -> ( Ecs, CollisionGrid CollectableData )
-- insertCollectable entityId _ position ( ecs, grid ) =
--     ( ecs
--     , CollisionGrid.insertAtPoint
--         ( position.x, position.y )
--         (CollectableData entityId position)
--         grid
--     )
-- checkCollection :
--     ( CollectableData, CollectorData )
--     -> ( Ecs, State )
--     -> ( Ecs, State )
-- checkCollection ( collectable, collector ) ( ecs, state ) =
--     let
--         deltaX =
--             collectable.position.x - collector.position.x
--         deltaY =
--             collectable.position.y - collector.position.y
--         distanceSquared =
--             deltaX * deltaX + deltaY * deltaY
--         radiusSquared =
--             collector.radius * collector.radius
--     in
--     if distanceSquared < radiusSquared then
--         ( ecs
--             |> Ecs.remove collectable.id Ecs.collectableComponent
--             |> Ecs.insert
--                 collectable.id
--                 Ecs.velocityComponent
--                 (Velocity 0 0 (2 * pi))
--             |> Ecs.insert
--                 collectable.id
--                 Ecs.scaleAnimationComponent
--                 (Animation.animation
--                     { startTime = state.time
--                     , duration = 0.5
--                     , from = 1
--                     , to = 1.5
--                     }
--                     |> Animation.andNext
--                         (Animation.nextAnimation
--                             { duration = 0.5
--                             , to = 0
--                             }
--                         )
--                 )
--             |> Ecs.update
--                 collectable.id
--                 Ecs.transformsComponent
--                 (Transforms.add (state.time + 1) Transforms.DestroyEntity)
--         , state
--         )
--     else
--         ( ecs, state )
