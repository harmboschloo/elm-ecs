-- AUTOGENERATED FILE --
-- https://harmboschloo.github.io/elm-ecs-generator/#%7B%22ecs%22%3A%5B%22Ecs%22%2C%22Ecs%22%5D%2C%22components%22%3A%5B%5B%22Components%22%2C%22Bounce%22%5D%2C%5B%22Components%22%2C%22Color%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Teleport%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%2C%22nodes%22%3A%5B%7B%22name%22%3A%22boundsBounce%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Bounce%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22boundsTeleport%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Teleport%22%5D%5D%7D%2C%7B%22name%22%3A%22movement%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Position%22%5D%2C%5B%22Components%22%2C%22Velocity%22%5D%5D%7D%2C%7B%22name%22%3A%22render%22%2C%22components%22%3A%5B%5B%22Components%22%2C%22Color%22%5D%2C%5B%22Components%22%2C%22Position%22%5D%5D%7D%5D%7D


module Ecs exposing
    ( Ecs, empty
    , EntityId, create, destroy, reset, size, activeSize, idToInt, intToId
    , ComponentType, get, insert, update, remove
    , NodeType, iterate, nodeSize
    , bounceComponent, colorComponent, positionComponent, teleportComponent, velocityComponent
    , BoundsBounceNode, BoundsTeleportNode, MovementNode, RenderNode
    , boundsBounceNode, boundsTeleportNode, movementNode, renderNode
    )

{-| Your Entitiy-Component-System.


# Model

@docs Ecs, empty


# Entities

@docs EntityId, create, destroy, reset, size, activeSize, idToInt, intToId


# Components

@docs ComponentType, get, insert, update, remove


# Nodes

@docs NodeType, iterate, nodeSize


# Your Component Types

@docs bounceComponent, colorComponent, positionComponent, teleportComponent, velocityComponent


# Your Nodes

@docs BoundsBounceNode, BoundsTeleportNode, MovementNode, RenderNode


# Your Node Types

@docs boundsBounceNode, boundsTeleportNode, movementNode, renderNode

-}

import Array
import Components
import Set



-- MODEL --


{-| -}
type Ecs
    = Ecs Model


type alias Model =
    { bounceComponents : Array.Array (Maybe Components.Bounce)
    , colorComponents : Array.Array (Maybe Components.Color)
    , positionComponents : Array.Array (Maybe Components.Position)
    , teleportComponents : Array.Array (Maybe Components.Teleport)
    , velocityComponents : Array.Array (Maybe Components.Velocity)
    , boundsBounceEntities : Set.Set Int
    , boundsTeleportEntities : Set.Set Int
    , movementEntities : Set.Set Int
    , renderEntities : Set.Set Int
    , destroyedEntitiesCache : List Int
    }


{-| -}
empty : Ecs
empty =
    Ecs
        { bounceComponents = Array.empty
        , colorComponents = Array.empty
        , positionComponents = Array.empty
        , teleportComponents = Array.empty
        , velocityComponents = Array.empty
        , boundsBounceEntities = Set.empty
        , boundsTeleportEntities = Set.empty
        , movementEntities = Set.empty
        , renderEntities = Set.empty
        , destroyedEntitiesCache = []
        }



-- ENTITIES --


{-| -}
type EntityId
    = EntityId Int


{-| -}
create : Ecs -> ( Ecs, EntityId )
create (Ecs model) =
    case model.destroyedEntitiesCache of
        [] ->
            ( Ecs
                { model
                    | bounceComponents = Array.push Nothing model.bounceComponents
                    , colorComponents = Array.push Nothing model.colorComponents
                    , positionComponents = Array.push Nothing model.positionComponents
                    , teleportComponents = Array.push Nothing model.teleportComponents
                    , velocityComponents = Array.push Nothing model.velocityComponents
                }
            , EntityId (entitiesSize model)
            )

        head :: tail ->
            ( Ecs { model | destroyedEntitiesCache = tail }
            , EntityId head
            )


{-| -}
destroy : EntityId -> Ecs -> Ecs
destroy (EntityId entityId) (Ecs model) =
    { model | destroyedEntitiesCache = entityId :: model.destroyedEntitiesCache }
        |> resetEntity entityId
        |> Ecs


{-| -}
reset : EntityId -> Ecs -> Ecs
reset (EntityId entityId) (Ecs model) =
    Ecs (resetEntity entityId model)


resetEntity : Int -> Model -> Model
resetEntity entityId model =
    { model
        | bounceComponents = Array.set entityId Nothing model.bounceComponents
        , colorComponents = Array.set entityId Nothing model.colorComponents
        , positionComponents = Array.set entityId Nothing model.positionComponents
        , teleportComponents = Array.set entityId Nothing model.teleportComponents
        , velocityComponents = Array.set entityId Nothing model.velocityComponents
        , boundsBounceEntities = Set.remove entityId model.boundsBounceEntities
        , boundsTeleportEntities = Set.remove entityId model.boundsTeleportEntities
        , movementEntities = Set.remove entityId model.movementEntities
        , renderEntities = Set.remove entityId model.renderEntities
    }


{-| -}
size : Ecs -> Int
size (Ecs model) =
    entitiesSize model


{-| -}
activeSize : Ecs -> Int
activeSize (Ecs model) =
    entitiesSize model - List.length model.destroyedEntitiesCache


entitiesSize : Model -> Int
entitiesSize model =
    Array.length model.bounceComponents


{-| -}
idToInt : EntityId -> Int
idToInt (EntityId id) =
    id


{-| -}
intToId : Int -> Ecs -> Maybe EntityId
intToId id ecs =
    if id < size ecs then
        Just (EntityId id)

    else
        Nothing



-- COMPONENTS --


{-| -}
type ComponentType a
    = ComponentType
        { getComponents : Model -> Array.Array (Maybe a)
        , setComponents : Array.Array (Maybe a) -> Model -> Model
        , entitySets : List EntitySetType
        }


{-| -}
get : EntityId -> ComponentType a -> Ecs -> Maybe a
get (EntityId entityId) (ComponentType componentType) (Ecs model) =
    Array.get entityId (componentType.getComponents model)
        |> Maybe.withDefault Nothing


{-| -}
insert : EntityId -> ComponentType a -> a -> Ecs -> Ecs
insert (EntityId entityId) (ComponentType componentType) component (Ecs model) =
    let
        updatedModel =
            componentType.setComponents
                (Array.set entityId (Just component) (componentType.getComponents model))
                model
    in
    Ecs
        (List.foldl (insertEntityInSet entityId) updatedModel componentType.entitySets)


insertEntityInSet : Int -> EntitySetType -> Model -> Model
insertEntityInSet entityId entitySetType model =
    if entitySetType.member entityId model then
        entitySetType.setEntities
            (Set.insert entityId (entitySetType.getEntities model))
            model

    else
        model


{-| -}
update : EntityId -> ComponentType a -> (Maybe a -> Maybe a) -> Ecs -> Ecs
update entityId componentType updater ecs =
    let
        maybeComponent =
            get entityId componentType ecs
    in
    case ( maybeComponent, updater maybeComponent ) of
        ( _, Just component ) ->
            insert entityId componentType component ecs

        ( Just _, Nothing ) ->
            remove entityId componentType ecs

        ( Nothing, Nothing ) ->
            ecs


{-| -}
remove : EntityId -> ComponentType a -> Ecs -> Ecs
remove (EntityId entityId) (ComponentType componentType) (Ecs model) =
    componentType.entitySets
        |> List.foldl (removeEntityFromSet entityId) model
        |> componentType.setComponents
            (Array.set entityId Nothing (componentType.getComponents model))
        |> Ecs


removeEntityFromSet : Int -> EntitySetType -> Model -> Model
removeEntityFromSet entityId entitySetType model =
    entitySetType.setEntities
        (Set.remove entityId (entitySetType.getEntities model))
        model



-- NODES --


{-| -}
type NodeType node
    = NodeType
        { getEntities : Model -> Set.Set Int
        , getNode : Int -> Model -> Maybe node
        }


{-| -}
iterate :
    NodeType node
    -> (EntityId -> node -> ( Ecs, context ) -> ( Ecs, context ))
    -> ( Ecs, context )
    -> ( Ecs, context )
iterate (NodeType nodeType) callback ( Ecs model, context ) =
    Set.foldl
        (\entityId result ->
            case nodeType.getNode entityId model of
                Nothing ->
                    result

                Just node ->
                    callback (EntityId entityId) node result
        )
        ( Ecs model, context )
        (nodeType.getEntities model)


{-| -}
nodeSize : NodeType a -> Ecs -> Int
nodeSize (NodeType nodeType) (Ecs model) =
    Set.size (nodeType.getEntities model)



-- YOUR COMPONENT TYPES --


{-| -}
bounceComponent : ComponentType Components.Bounce
bounceComponent =
    ComponentType
        { getComponents = .bounceComponents
        , setComponents = \components model -> { model | bounceComponents = components }
        , entitySets = [ boundsBounceEntitySet ]
        }


{-| -}
colorComponent : ComponentType Components.Color
colorComponent =
    ComponentType
        { getComponents = .colorComponents
        , setComponents = \components model -> { model | colorComponents = components }
        , entitySets = [ renderEntitySet ]
        }


{-| -}
positionComponent : ComponentType Components.Position
positionComponent =
    ComponentType
        { getComponents = .positionComponents
        , setComponents = \components model -> { model | positionComponents = components }
        , entitySets = [ boundsBounceEntitySet, boundsTeleportEntitySet, movementEntitySet, renderEntitySet ]
        }


{-| -}
teleportComponent : ComponentType Components.Teleport
teleportComponent =
    ComponentType
        { getComponents = .teleportComponents
        , setComponents = \components model -> { model | teleportComponents = components }
        , entitySets = [ boundsTeleportEntitySet ]
        }


{-| -}
velocityComponent : ComponentType Components.Velocity
velocityComponent =
    ComponentType
        { getComponents = .velocityComponents
        , setComponents = \components model -> { model | velocityComponents = components }
        , entitySets = [ boundsBounceEntitySet, movementEntitySet ]
        }



-- YOUR NODES --


{-| -}
type alias BoundsBounceNode =
    { bounce : Components.Bounce
    , position : Components.Position
    , velocity : Components.Velocity
    }


{-| -}
type alias BoundsTeleportNode =
    { position : Components.Position
    , teleport : Components.Teleport
    }


{-| -}
type alias MovementNode =
    { position : Components.Position
    , velocity : Components.Velocity
    }


{-| -}
type alias RenderNode =
    { color : Components.Color
    , position : Components.Position
    }



-- YOUR NODE TYPES --


{-| -}
boundsBounceNode : NodeType BoundsBounceNode
boundsBounceNode =
    NodeType
        { getEntities = .boundsBounceEntities
        , getNode =
            \entityId model ->
                BoundsBounceNode
                    |> nextComponent model.bounceComponents entityId
                    |> Maybe.andThen (nextComponent model.positionComponents entityId)
                    |> Maybe.andThen (nextComponent model.velocityComponents entityId)
        }


{-| -}
boundsTeleportNode : NodeType BoundsTeleportNode
boundsTeleportNode =
    NodeType
        { getEntities = .boundsTeleportEntities
        , getNode =
            \entityId model ->
                BoundsTeleportNode
                    |> nextComponent model.positionComponents entityId
                    |> Maybe.andThen (nextComponent model.teleportComponents entityId)
        }


{-| -}
movementNode : NodeType MovementNode
movementNode =
    NodeType
        { getEntities = .movementEntities
        , getNode =
            \entityId model ->
                MovementNode
                    |> nextComponent model.positionComponents entityId
                    |> Maybe.andThen (nextComponent model.velocityComponents entityId)
        }


{-| -}
renderNode : NodeType RenderNode
renderNode =
    NodeType
        { getEntities = .renderEntities
        , getNode =
            \entityId model ->
                RenderNode
                    |> nextComponent model.colorComponents entityId
                    |> Maybe.andThen (nextComponent model.positionComponents entityId)
        }


nextComponent : Array.Array (Maybe a) -> Int -> (a -> b) -> Maybe b
nextComponent components entityId callback =
    Array.get entityId components
        |> Maybe.withDefault Nothing
        |> Maybe.map callback



-- YOUR ENTITY SET TYPES --


type alias EntitySetType =
    { getEntities : Model -> Set.Set Int
    , setEntities : Set.Set Int -> Model -> Model
    , member : Int -> Model -> Bool
    }


boundsBounceEntitySet : EntitySetType
boundsBounceEntitySet =
    { getEntities = .boundsBounceEntities
    , setEntities = \entities model -> { model | boundsBounceEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.bounceComponents
                && isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.velocityComponents
    }


boundsTeleportEntitySet : EntitySetType
boundsTeleportEntitySet =
    { getEntities = .boundsTeleportEntities
    , setEntities = \entities model -> { model | boundsTeleportEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.teleportComponents
    }


movementEntitySet : EntitySetType
movementEntitySet =
    { getEntities = .movementEntities
    , setEntities = \entities model -> { model | movementEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.positionComponents
                && isComponentsMember entityId model.velocityComponents
    }


renderEntitySet : EntitySetType
renderEntitySet =
    { getEntities = .renderEntities
    , setEntities = \entities model -> { model | renderEntities = entities }
    , member =
        \entityId model ->
            isComponentsMember entityId model.colorComponents
                && isComponentsMember entityId model.positionComponents
    }


isComponentsMember entityId components =
    case Array.get entityId components of
        Just (Just _) ->
            True

        _ ->
            False
